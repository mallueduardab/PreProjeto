@book{apel2016feature,
	title={Feature-oriented software product lines},
	author={Apel, Sven and Batory, Don and K{\"a}stner, Christian and Saake, Gunter},
	year={2016},
	publisher={Springer}
}

@article{colanzi2014abordagem,
	title={Uma abordagem de otimiza{\c{c}}{\~a}o multiobjetivo para projeto arquitetural de linha de produto de software},
	author={Colanzi, Thelma Elita},
	year={2014}
}

@article{roy2007survey,
  title={A survey on software clone detection research},
  author={Roy, Chanchal Kumar and Cordy, James R},
  journal={Queen’s School of Computing TR},
  volume={541},
  number={115},
  pages={64--68},
  year={2007}
}

@inproceedings{gautam2016various,
  title={Various code clone detection techniques and tools: a comprehensive survey},
  author={Gautam, Pratiksha and Saini, Hemraj},
  booktitle={International Conference on Smart Trends for Information Technology and Computer Communications},
  pages={655--667},
  year={2016},
  organization={Springer}
}

@inproceedings{solanki2016comparative,
  title={Comparative study of software clone detection techniques},
  author={Solanki, Kamna and Kumari, Sunayna},
  booktitle={Management and Innovation Technology International Conference (MITicon), 2016},
  pages={MIT--152},
  year={2016},
  organization={IEEE}
} 
@InProceedings{Torres2017,
  author     = {Torres, Jose Jorge Barreto and Junior, Methanias C. R. and De Freitas Farias, Mario Andre},
  title      = {Procedural x OO: A corporative experiment on source code clone mining},
  year       = {2017},
  volume     = {2},
  pages      = {395 - 402},
  address    = {Porto, Portugal},
  note       = {Closed source;Code clone detection;Experimental software engineering;Mining software repositories;Object oriented software;Private educations;Proprietary software;Similarity threshold;},
  abstract   = {Open Source Software (OSS) repositories are widely used to execute studies around code clone detection, mostly inside the public scenario. However, corporative code Repositories have their content restricted and protected from access by developers who are not part of the company. Besides, there are a lot of questions regarding paradigm efficiency and its relation to clone manifestation. This article presents an experiment performed on systems developed in a large private education company, to observe and compare the incidence of cloned code between Object Oriented and Procedural proprietary software, using an exact similarity threshold. The results indicate that Object Oriented Software wondrously showed higher cloned lines of code incidence and a similar use of abstraction (clone sets) for functions or methods. &copy;2017 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  journal    = {ICEIS 2017 - Proceedings of the 19th International Conference on Enterprise Information Systems},
  key        = {Object oriented programming},
  keywords   = {Cloning;Codes (symbols);Computer software;Information systems;Open source software;Open systems;Software engineering;},
  language   = {English},
  repository = {EI COMPENDEX},
}

@Article{jang2009bitshred,
  author  = {Jang, Jiyong and Brumley, David},
  title   = {Bitshred: Fast, scalable code reuse detection in binary code (cmu-cylab-10-006)},
  journal = {CyLab},
  year    = {2009},
  pages   = {28},
}

@InProceedings{Rattan2016,
  author     = {Rattan, Dhavleesh and Kaur, Jagdeep},
  title      = {Systematic Mapping Study of Metrics Based Clone Detection Techniques},
  booktitle  = {Proceedings of the International Conference on Advances in Information Communication Technology \& Computing},
  year       = {2016},
  series     = {AICTC '16},
  pages      = {76:1--76:7},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {2979855},
  articleno  = {76},
  doi        = {10.1145/2979779.2979855},
  isbn       = {978-1-4503-4213-1},
  keywords   = {Code clone, software metrics, systematic mapping, systematic review},
  location   = {Bikaner, India},
  numpages   = {7},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/2979779.2979855},
}


%%%%



@Article{Nishi2018,
  author     = {Manziba Akanda Nishi and Kostadin Damevski},
  title      = {Scalable code clone detection and search based on adaptive prefix filtering},
  journal    = {Journal of Systems and Software},
  year       = {2018},
  volume     = {137},
  pages      = {130 - 142},
  issn       = {0164-1212},
  doi        = {https://doi.org/10.1016/j.jss.2017.11.039},
  keywords   = {Code clone detection, Prefix filtering, Software maintenance},
  nºtabela   = { 24},
  repository = {SCIENCE},
  url        = {https://www.sciencedirect.com/science/article/pii/S0164121217302790},
}

@InProceedings{Vishwachi2017,
  author     = {Vishwachi and Gupta, Sonam},
  title      = {Detection of near-miss clones using metrics and abstract syntax trees},
  year       = {2017},
  pages      = {230 - 234},
  address    = {Coimbatore, India},
  note       = {Abstract Syntax Trees;Code clone;Code sections;Code segments;Metrics;Near-misses;},
  abstract   = {Reusing code segments via copying and pasting is quite common practice in the process of software development. The pasted segment may include minor differences from the original segment. As a result of copying and pasting, several code sections may be similar to each other. Such sections are referred to as code clones. This paper presents an approach for detection of these code clones. The reason for detecting them is that they generate problem at the time of software maintenance. The method adopted in this paper involves the use of metrics and Abstract Syntax Trees. &copy; 2017 IEEE.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  journal    = {Proceedings of the International Conference on Inventive Communication and Computational Technologies, ICICCT 2017},
  key        = {Cloning},
  keywords   = {Codes (symbols);Software design;Syntactics;Trees (mathematics);},
  language   = {English},
  nºtabela   = {01},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1109/ICICCT.2017.7975193},
}

@InProceedings{Sheneamer2016,
  author     = {A. Sheneamer and J. Kalita},
  title      = {Semantic Clone Detection Using Machine Learning},
  booktitle  = {2016 15th IEEE International Conference on Machine Learning and Applications (ICMLA)},
  year       = {2016},
  pages      = {1024-1028},
  month      = {Dec},
  doi        = {10.1109/ICMLA.2016.0185},
  keywords   = {learning (artificial intelligence);program debugging;software maintenance;source code (software);tree data structures;AST;IJaDataset2.0;PDG;abstract syntax trees;bug propagation;classification algorithms;code fragment pair;machine learning framework;program dependency graphs;semantic code clone detection;software maintenance;source code fragments;syntactic clones;type-3 clone detection;type-4 clone detection;Cloning;Control systems;Feature extraction;Machine learning algorithms;Measurement;Semantics;Syntactics;Abstract syntax trees (AST);Classifier algorithms;Code clones;Program dependence graphs (PDG);Software clones},
  nºtabela   = {02},
  repository = {IEEE},
}

@InProceedings{Casazza2001,
  author     = {G. Casazza and G. Antoniol and U. Villano and E. Merlo and M. Di Penta},
  title      = {Identifying clones in the Linux kernel},
  booktitle  = {Proceedings First IEEE International Workshop on Source Code Analysis and Manipulation},
  year       = {2001},
  pages      = {90-97},
  doi        = {10.1109/SCAM.2001.972670},
  keywords   = {Unix;operating system kernels;software metrics;software portability;Linux kernel;clone identification;clone percentage;cloned code;code analysis;duplicated code;hardware-dependent code;large multi-platform software systems;metric-based approach;multi-platform source code;single platform;Assembly;Cloning;Computer industry;Hardware;Kernel;Linux;Operating systems;Software metrics;Software systems;Writing},
  nºtabela   = {03},
  repository = {IEEE},
}

@InProceedings{Vislavski2018,
  author     = {T. Vislavski and G. Rakić and N. Cardozo and Z. Budimac},
  title      = {LICCA: A tool for cross-language clone detection},
  booktitle  = {2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  year       = {2018},
  pages      = {512-516},
  month      = {March},
  doi        = {10.1109/SANER.2018.8330250},
  keywords   = {C language;Java;program diagnostics;software maintenance;software quality;software tools;C language;Java language;JavaScript;LICCA;Modula-2;Scheme;code clones;code deterioration;cross-language clone detection;duplicate code fragments;programming language;software quality;software system development;software system maintenance;system bugs;Cloning;Java;Maintenance engineering;Semantics;Software systems;Syntactics;Tools},
  nºtabela   = {04},
  repository = {IEEE},
}

@InProceedings{Lucca2002,
  author     = {G. A. Di Lucca and M. Di Penta and A. R. Fasolino},
  title      = {An approach to identify duplicated web pages},
  booktitle  = {Proceedings 26th Annual International Computer Software and Applications},
  year       = {2002},
  pages      = {481-486},
  doi        = {10.1109/CMPSAC.2002.1045051},
  issn       = {0730-3157},
  keywords   = {Internet;electronic commerce;information resources;software metrics;clone detection;duplication;software metrics;source code clones;web engineering;web page metrics;web site analysis;Application software;Application specific processors;Cloning;HTML;Plagiarism;Software metrics;Software testing;Time to market;US Department of Transportation;Web pages},
  nºtabela   = {05},
  repository = {IEEE},
}

@InProceedings{Lee2005,
  author     = {Lee, Seunghak and Jeong, Iryoung},
  title      = {SDD: High Performance Code Clone Detection System for Large Scale Source Code},
  booktitle  = {Companion to the 20th Annual ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications},
  year       = {2005},
  series     = {OOPSLA '05},
  pages      = {140--141},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {1094903},
  doi        = {10.1145/1094855.1094903},
  isbn       = {1-59593-193-7},
  keywords   = {code clone, duplicated code, search index, system maintenance},
  location   = {San Diego, CA, USA},
  numpages   = {2},
  nºtabela   = {06},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/1094855.1094903},
}

@InProceedings{Ueda2002,
  author     = {Ueda, Y. and Kamiya, T. and Kusumoto, S. and Inoue, K.},
  title      = {On detection of gapped code clones using gap locations},
  year       = {2002},
  volume     = {2002-January},
  pages      = {327 - 336},
  address    = {Gold Coast, QLD, Australia},
  note       = {Code clone;Code clone detection;Copy-and-paste;Experimental evaluation;Maintenance supports;One-factor;Source files;},
  abstract   = {It is generally accepted that a code clone is one factor making software maintenance difficult. A code clone is a code portion in source files that is identical or similar to another. Clones are introduced because of various reasons such as reusing code by 'copy-and-paste' and so on. Since developers usually modify the copied-and-pasted code portions, there are gaps between them and the original code portion. We call such code portions including gaps gapped code clones. Several code clone detection methods, which consider such gaps, have been proposed. However, it is costly to detect all gapped code clones. This paper proposes a new method to visualize gapped code clones as if they were actually detected, based on the detection results of conventional code clones. Using the proposed method, the developer can specify target clones efficiently. Moreover, we implement the proposed method in the maintenance support environment and conduct an experimental evaluation. &copy; 2002 IEEE.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  issn       = {15301362},
  journal    = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
  key        = {Codes (symbols)},
  keywords   = {Cloning;Copying;Software engineering;},
  language   = {English},
  nºtabela   = {07},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1109/APSEC.2002.1183002},
}

@InProceedings{Abdelkader2015,
  author     = {M. Abdelkader and M. Mimoun},
  title      = {Clone detection using time series and dynamic time warping techniques},
  booktitle  = {2015 Third World Conference on Complex Systems (WCCS)},
  year       = {2015},
  pages      = {1-6},
  month      = {Nov},
  doi        = {10.1109/ICoCS.2015.7483299},
  keywords   = {data mining;software engineering;time series;DTW similarity value;clone detection problem;data mining;data query;dynamic time warping techniques;time series data;Cloning;Heuristic algorithms;Measurement;Software algorithms;Software systems;Time series analysis;Clone Detection;Dynamic Time Warping;Time series},
  nºtabela   = {08},
  repository = {IEEE},
}

@InProceedings{Dang2012,
  author     = {Dang, Yingnong and Zhang, Dongmei and Ge, Song and Chu, Chengyun and Qiu, Yingjun and Xie, Tao},
  title      = {XIAO: Tuning Code Clones at Hands of Engineers in Practice},
  booktitle  = {Proceedings of the 28th Annual Computer Security Applications Conference},
  year       = {2012},
  series     = {ACSAC '12},
  pages      = {369--378},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {2421004},
  doi        = {10.1145/2420950.2421004},
  isbn       = {978-1-4503-1312-4},
  keywords   = {code clone, code duplication, code-clone detection, code-clone search, duplicated security vulnerability},
  location   = {Orlando, Florida, USA},
  numpages   = {10},
  nºtabela   = {09},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/2420950.2421004},
}

@InProceedings{Roopam2017,
  author     = {Roopam and G. Singh},
  title      = {To enhance the code clone detection algorithm by using hybrid approach for detection of code clones},
  booktitle  = {2017 International Conference on Intelligent Computing and Control Systems (ICICCS)},
  year       = {2017},
  pages      = {192-198},
  month      = {June},
  doi        = {10.1109/ICCONS.2017.8250708},
  keywords   = {program debugging;software maintenance;software metrics;software reusability;HYBRID approach;code clone detection algorithm;duplicate code;hybrid approach;source code;Algorithm design and analysis;Cloning;Computer bugs;Control systems;Measurement;Software;Syntactics;Code clone;parsing;plagiarism;refactoring;reuse;semantic;similarity;syntactic},
  nºtabela   = {10},
  repository = {IEEE},
}

@InProceedings{Jiang2007a,
  author     = {L. Jiang and G. Misherghi and Z. Su and S. Glondu},
  title      = {DECKARD: Scalable and Accurate Tree-Based Detection of Code Clones},
  booktitle  = {29th International Conference on Software Engineering (ICSE'07)},
  year       = {2007},
  pages      = {96-105},
  month      = {May},
  doi        = {10.1109/ICSE.2007.30},
  issn       = {0270-5257},
  keywords   = {software engineering;trees (mathematics);Deckard;Euclidean distance metric;code clones;software engineering;source code;subtrees;tree representations;tree-based detection;Application software;Cloning;Clustering algorithms;Euclidean distance;Fingerprint recognition;Java;Linux;Programming profession;Robustness;Software engineering},
  nºtabela   = {11},
  repository = {IEEE},
}

@InProceedings{Krutz2014,
  author     = {Krutz, Daniel E. and Le, Wei},
  title      = {A Code clone oracle},
  year       = {2014},
  pages      = {388 - 391},
  address    = {Hyderabad, India},
  note       = {Code clone detection;Code search;Equivalent codes;High confidence;Manual inspection;Multiple codes;Open source projects;PostgreSQL;},
  abstract   = {Code clones are functionally equivalent code segments. Detecting code clones is important for determining bugs, fixes and software reuse. Code clone detection is also essential for developing fast and precise code search algorithms. However, the challenge of such research is to evaluate that the clones detected are indeed functionally equivalent, considering the majority of clones are not textual or even syntactically identical. The goal of this work is to generate a set of method level code clones with a high confidence to help to evaluate future code clone detection and code search tools to evaluate their techniques. We selected three open source programs, Apache, Python and PostgreSQL, and randomly sampled a total of 1536 function pairs. To confirm whether or not these function pairs indicate a clone and what types of clones they belong to, we recruited three experts who have experience in code clone research and four students who have experience in programming for manual inspection. For confidence of the data, the experts consulted multiple code clone detection tools to make the consensus. To assist manual inspection, we built a tool to automatically load function pairs of interest and record the manual inspection results. We found that none of the 66 pairs are textual identical type-1 clones, and 9 pairs are type-4 clones. Our data is available at: http://phd.gccis.rit.edu/weile/data/cloneoracle/. Copyright 2014 ACM.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  journal    = {11th Working Conference on Mining Software Repositories, MSR 2014 - Proceedings},
  key        = {Cloning},
  keywords   = {Codes (symbols);Computer programming;Computer software;Computer software reusability;Function evaluation;Inspection;Open source software;Program debugging;Software engineering;},
  language   = {English},
  nºtabela   = {12},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1145/2597073.2597127},
}

@InProceedings{Lin2014,
  author     = {Lin, Yun and Xing, Zhenchang and Xue, Yinxing and Liu, Yang and Peng, Xin and Sun, Jun and Zhao, Wenyun},
  title      = {Detecting Differences Across Multiple Instances of Code Clones},
  booktitle  = {Proceedings of the 36th International Conference on Software Engineering},
  year       = {2014},
  series     = {ICSE 2014},
  pages      = {164--174},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {2568298},
  doi        = {10.1145/2568225.2568298},
  isbn       = {978-1-4503-2756-5},
  keywords   = {Code clone, Human study, Program differencing},
  location   = {Hyderabad, India},
  numpages   = {11},
  nºtabela   = {13},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/2568225.2568298},
}

@Article{Kamiya2002,
  author     = {T. Kamiya and S. Kusumoto and K. Inoue},
  title      = {CCFinder: a multilinguistic token-based code clone detection system for large scale source code},
  journal    = {IEEE Transactions on Software Engineering},
  year       = {2002},
  volume     = {28},
  number     = {7},
  pages      = {654-670},
  month      = {Jul},
  issn       = {0098-5589},
  doi        = {10.1109/TSE.2002.1019480},
  keywords   = {computer aided software engineering;high level languages;large-scale systems;optimising compilers;software maintenance;software metrics;software tools;C language;C++ language;CASE tool;CCFinder;COBOL;FreeBSD;JDK;Java;Java Development Kit;Linux;NetBSD;case studies;duplicated code;input source text transformation;large-scale source code;multi-linguistic token-based code clone detection system;optimization techniques;software maintainability;software metrics;system characteristics identification;token-by-token comparison;Cloning;Computer aided software engineering;Java;Large-scale systems;Linux;Maintenance engineering;Programming profession;Software maintenance;Software systems;Software tools},
  nºtabela   = {14},
  repository = {IEEE},
}

@InProceedings{Joshi2015,
  author     = {Joshi, Bikash and Budhathoki, Puskar and Woon, Wei Lee and Svetinovic, Davor},
  title      = {Software clone detection using clustering approach},
  year       = {2015},
  volume     = {9490},
  pages      = {520 - 527},
  address    = {Istanbul, Turkey},
  note       = {Clone detection;Clustering approach;Complexity reduction;High-precision;Software clone detection;Software metrics;Software Quality;Software systems;},
  abstract   = {Code clones are highly similar or identical code segments. Identification of clones helps improve software quality through managed evolution, refactoring, complexity reduction, etc. In this study, we investigate Type 1 and Type 2 function clones using a data mining technique. First, we create a dataset by collecting metrics for all functions in a software system. Second, we apply DBSCAN clustering algorithm on the dataset so that each cluster can be analysed to detect Type 1 and Type 2 function clones. We evaluate our approach by analyzing an open source software Bitmessage. We calculate the precision value to show the effectiveness of our approach in detecting function clones. We show that our approach for functional clone detection is effective with high precision value and number of function clones detected. &copy; Springer International Publishing Switzerland 2015.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  issn       = {03029743},
  journal    = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  key        = {Cloning},
  keywords   = {Clustering algorithms;Computer software;Computer software selection and evaluation;Data mining;Information science;Open source software;Open systems;Software engineering;},
  language   = {English},
  nºtabela   = {15},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1007/978-3-319-26535-3_59},
}

@InProceedings{Sutton2005,
  author     = {Sutton, Andrew and Kagdi, Huzefa and Maletic, Jonathan I. and Volkert, L. Gwenn},
  title      = {Hybridizing Evolutionary Algorithms and Clustering Algorithms to Find Source-code Clones},
  booktitle  = {Proceedings of the 7th Annual Conference on Genetic and Evolutionary Computation},
  year       = {2005},
  series     = {GECCO '05},
  pages      = {1079--1080},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {1068191},
  doi        = {10.1145/1068009.1068191},
  isbn       = {1-59593-010-8},
  keywords   = {clone detection, evolutionary algorithms, software engineering},
  location   = {Washington DC, USA},
  numpages   = {2},
  nºtabela   = {16},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/1068009.1068191},
}

@InProceedings{Nguyen2009,
  author     = {Nguyen, Tung Thanh and Nguyen, Hoan Anh and Al-Kofahi, Jafar M. and Pham, Nam H. and Nguyen, Tien N.},
  title      = {Scalable and incremental clone detection for evolving software},
  year       = {2009},
  pages      = {491 - 494},
  address    = {Edmonton, AB, Canada},
  note       = {Abstract Syntax Trees;Characteristic vectors;Clone detection;Clone management;Empirical evaluations;Large-scale software projects;Software developer;Structural feature;},
  abstract   = {Code clone management has been shown to have several benefits for software developers. When source code evolves, clone management requires a mechanism to efficiently and incrementally detect code clones in the new revision. This paper introduces an incremental clone detection tool, called ClemanX. Our tool represents code fragments as subtrees of Abstract Syntax Trees (ASTs), measures their similarity levels based on their characteristic vectors of structural features, and solves the task of incrementally detecting similar code as an incremental distance-based clustering problem. Our empirical evaluation on large-scale software projects shows the usefulness and good performance of ClemanX.<br/>},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  journal    = {IEEE International Conference on Software Maintenance, ICSM},
  key        = {Computer software maintenance},
  keywords   = {Cloning;Codes (symbols);Trees (mathematics);},
  language   = {English},
  nºtabela   = {17},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1109/ICSM.2009.5306283},
}

@InProceedings{Yuan2011,
  author     = {Y. Yuan and Y. Guo},
  title      = {CMCD: Count Matrix Based Code Clone Detection},
  booktitle  = {2011 18th Asia-Pacific Software Engineering Conference},
  year       = {2011},
  pages      = {250-257},
  month      = {Dec},
  doi        = {10.1109/APSEC.2011.13},
  issn       = {1530-1362},
  keywords   = {matrix algebra;program diagnostics;software maintenance;CMCD;clone cluster;code clone detection;count matrix;Bipartite graph;Cloning;Layout;Programming;Switches;Syntactics;Vectors;Code clone detection;bipartite graph matching;count matrix},
  nºtabela   = {18},
  repository = {IEEE},
}

@InProceedings{Al-omari2016,
  author     = {Al-omari, Farouq and Roy, Chanchal K.},
  title      = {Is Code Cloning in Games Really Different?},
  booktitle  = {Proceedings of the 31st Annual ACM Symposium on Applied Computing},
  year       = {2016},
  series     = {SAC '16},
  pages      = {1512--1519},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {2851792},
  doi        = {10.1145/2851613.2851792},
  isbn       = {978-1-4503-3739-7},
  keywords   = {game clones, open source games, software clones},
  location   = {Pisa, Italy},
  numpages   = {8},
  nºtabela   = {19},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/2851613.2851792},
}

@InProceedings{Schugerl2011,
  author     = {Schugerl, Philipp},
  title      = {Scalable Clone Detection Using Description Logic},
  booktitle  = {Proceedings of the 5th International Workshop on Software Clones},
  year       = {2011},
  series     = {IWSC '11},
  pages      = {47--53},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {1985413},
  doi        = {10.1145/1985404.1985413},
  isbn       = {978-1-4503-0588-4},
  keywords   = {code clone detection, semantic-web.},
  location   = {Waikiki, Honolulu, HI, USA},
  numpages   = {7},
  nºtabela   = {20},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/1985404.1985413},
}

@InProceedings{Cordy2011,
  author     = {J. R. Cordy and C. K. Roy},
  title      = {DebCheck: Efficient Checking for Open Source Code Clones in Software Systems},
  booktitle  = {2011 IEEE 19th International Conference on Program Comprehension},
  year       = {2011},
  pages      = {217-218},
  month      = {June},
  doi        = {10.1109/ICPC.2011.27},
  issn       = {1092-8138},
  keywords   = {program diagnostics;public domain software;DebCheck;Debian source distribution;NiCad clone detector;open source code clones;open source software;software systems;Cloning;Communities;DVD;Detectors;Law;Licenses;Software systems;GPL;clone detection;licensing;open source},
  nºtabela   = {21},
  repository = {IEEE},
}

@Article{Bian2013,
  author     = {Yixin Bian and Gunes Koru and Xiaohong Su and Peijun Ma},
  title      = {SPAPE: A semantic-preserving amorphous procedure extraction method for near-miss clones},
  journal    = {Journal of Systems and Software},
  year       = {2013},
  volume     = {86},
  number     = {8},
  pages      = {2077 - 2093},
  issn       = {0164-1212},
  doi        = {https://doi.org/10.1016/j.jss.2013.03.061},
  keywords   = {Near-miss clones, Amorphous procedure extraction, Refactoring},
  nºtabela   = {22},
  repository = {SCIENCE},
  url        = {https://www.sciencedirect.com/science/article/pii/S0164121213000733},
}

@Article{Evans2009,
  author     = {Evans, William S. and Fraser, Christopher W. and Ma, Fei},
  title      = {Clone detection via structural abstraction},
  journal    = {Software Quality Journal},
  year       = {2009},
  volume     = {17},
  number     = {4},
  pages      = {309 - 330},
  issn       = {09639314},
  note       = {Abstract Syntax Trees;Clone detection;Intermediate representations;Procedural abstraction;Refactorings;Subtrees;},
  abstract   = {This paper describes the design, implementation, and application of a new algorithm to detect cloned code. It operates on the abstract syntax trees formed by many compilers as an intermediate representation. It extends prior work by identifying clones even when arbitrary subtrees have been changed. These subtrees may represent structural rather than simply lexical code differences. In several hundred thousand lines of Java and C# code, 20-50% of the clones that we find involve these structural changes, which are not accounted for by previous methods. Our method also identifies cloning in declarations, so it is somewhat more general than conventional procedural abstraction. &copy; 2009 Springer Science+Business Media, LLC.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  key        = {Cloning},
  keywords   = {Abstracting;},
  language   = {English},
  nºtabela   = {23},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1007/s11219-009-9074-y},
}

@InProceedings{Svajlenko2017,
  author     = {Svajlenko, Jeffrey and Roy, Chanchal K.},
  title      = {CloneWorks: A Fast and Flexible Large-scale Near-miss Clone Detection Tool},
  booktitle  = {Proceedings of the 39th International Conference on Software Engineering Companion},
  year       = {2017},
  series     = {ICSE-C '17},
  pages      = {177--179},
  address    = {Piscataway, NJ, USA},
  publisher  = {IEEE Press},
  acmid      = {3098404},
  doi        = {10.1109/ICSE-C.2017.78},
  isbn       = {978-1-5386-1589-8},
  keywords   = {clone detection, code clone, fast, flexible, scalable},
  location   = {Buenos Aires, Argentina},
  numpages   = {3},
  nºtabela   = {25},
  repository = {ACM},
  url        = {https://doi.org/10.1109/ICSE-C.2017.78},
}

@InProceedings{Krutz2015,
  author     = {Krutz, Daniel E. and Malachowsky, Samuel A. and Shihab, Emad},
  title      = {Examining the Effectiveness of Using Concolic Analysis to Detect Code Clones},
  booktitle  = {Proceedings of the 30th Annual ACM Symposium on Applied Computing},
  year       = {2015},
  series     = {SAC '15},
  pages      = {1610--1615},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {2695929},
  doi        = {10.1145/2695664.2695929},
  isbn       = {978-1-4503-3196-8},
  keywords   = {code clones, concolic analysis, software engineering},
  location   = {Salamanca, Spain},
  numpages   = {6},
  nºtabela   = {26},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/2695664.2695929},
}

@InProceedings{Dang2011,
  author     = {Dang, Yingnong and Ge, Song and Huang, Ray and Zhang, Dongmei},
  title      = {Code Clone Detection Experience at Microsoft},
  booktitle  = {Proceedings of the 5th International Workshop on Software Clones},
  year       = {2011},
  series     = {IWSC '11},
  pages      = {63--64},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {1985417},
  doi        = {10.1145/1985404.1985417},
  isbn       = {978-1-4503-0588-4},
  keywords   = {clone detection, experience},
  location   = {Waikiki, Honolulu, HI, USA},
  numpages   = {2},
  nºtabela   = {27},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/1985404.1985417},
}

@InProceedings{Lee2010,
  author     = {Lee, Mu-Woong and Roh, Jong-Won and Hwang, Seung-won and Kim, Sunghun},
  title      = {Instant Code Clone Search},
  booktitle  = {Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering},
  year       = {2010},
  series     = {FSE '10},
  pages      = {167--176},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {1882317},
  doi        = {10.1145/1882291.1882317},
  isbn       = {978-1-60558-791-2},
  keywords   = {clone detection, code search},
  location   = {Santa Fe, New Mexico, USA},
  numpages   = {10},
  nºtabela   = {28},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/1882291.1882317},
}

@InProceedings{Svajlenko2017a,
  author     = {Svajlenko, Jeffrey and Roy, Chanchal K.},
  title      = {Fast and Flexible Large-scale Clone Detection with CloneWorks},
  booktitle  = {Proceedings of the 39th International Conference on Software Engineering Companion},
  year       = {2017},
  series     = {ICSE-C '17},
  pages      = {27--30},
  address    = {Piscataway, NJ, USA},
  publisher  = {IEEE Press},
  acmid      = {3098354},
  doi        = {10.1109/ICSE-C.2017.3},
  isbn       = {978-1-5386-1589-8},
  keywords   = {clone detection, code clone, fast, flexible, scalable},
  location   = {Buenos Aires, Argentina},
  numpages   = {4},
  nºtabela   = {29},
  repository = {ACM},
  url        = {https://doi.org/10.1109/ICSE-C.2017.3},
}

@InProceedings{Lillack2014,
  author     = {Lillack, Max and Bucholdt, Christian and Schilling, Daniela},
  title      = {Detection of Code Clones in Software Generators},
  booktitle  = {Proceedings of the 6th International Workshop on Feature-Oriented Software Development},
  year       = {2014},
  series     = {FOSD '14},
  pages      = {37--44},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {2662116},
  doi        = {10.1145/2660190.2662116},
  isbn       = {978-1-4503-2980-4},
  keywords   = {code clones, feature-oriented refactoring, macros, software generators},
  location   = {V\&auml;ster\&aring;s, Sweden},
  numpages   = {8},
  nºtabela   = {30},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/2660190.2662116},
}

@InProceedings{Tairas2006,
  author     = {Tairas, Robert and Gray, Jeff},
  title      = {Phoenix-based Clone Detection Using Suffix Trees},
  booktitle  = {Proceedings of the 44th Annual Southeast Regional Conference},
  year       = {2006},
  series     = {ACM-SE 44},
  pages      = {679--684},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {1185597},
  doi        = {10.1145/1185448.1185597},
  isbn       = {1-59593-315-8},
  keywords   = {clone detection, code clones, software analysis, suffix trees},
  location   = {Melbourne, Florida},
  numpages   = {6},
  nºtabela   = {31},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/1185448.1185597},
}

@InProceedings{Yuan2012,
  author     = {Yuan, Yang},
  title      = {A Scalable and Accurate Approach Based on Count Matrix for Detecting Code Clones},
  booktitle  = {Proceedings of the 11th Annual International Conference on Aspect-oriented Software Development Companion},
  year       = {2012},
  series     = {AOSD Companion '12},
  pages      = {21--22},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {2162126},
  doi        = {10.1145/2162110.2162126},
  isbn       = {978-1-4503-1222-6},
  keywords   = {code clone, count matrix, token based},
  location   = {Potsdam, Germany},
  numpages   = {2},
  nºtabela   = {32},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/2162110.2162126},
}

@InProceedings{Nguyen2009b,
  author     = {T. T. Nguyen and H. A. Nguyen and N. H. Pham and J. M. Al-Kofahi and T. N. Nguyen},
  title      = {ClemanX: Incremental clone detection tool for evolving software},
  booktitle  = {2009 31st International Conference on Software Engineering - Companion Volume},
  year       = {2009},
  pages      = {437-438},
  month      = {May},
  doi        = {10.1109/ICSE-COMPANION.2009.5071050},
  keywords   = {program diagnostics;software maintenance;ClemanX incremental clone detection tool;code clone management;real-world software project;software evolution analysis;Character generation;Cloning;Feature extraction;Project management;Software tools},
  nºtabela   = {33},
  repository = {IEEE},
}

@InProceedings{Lee2009,
  author     = {Lee, Hyo-Sub and Doh, Kyung-Goo},
  title      = {Tree-pattern-based Duplicate Code Detection},
  booktitle  = {Proceedings of the ACM First International Workshop on Data-intensive Software Management and Mining},
  year       = {2009},
  series     = {DSMM '09},
  pages      = {7--12},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {1651312},
  doi        = {10.1145/1651309.1651312},
  isbn       = {978-1-60558-810-0},
  keywords   = {clone detection, reverse engineering, software maintenance, tree-pattern},
  location   = {Hong Kong, China},
  numpages   = {6},
  nºtabela   = {34},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/1651309.1651312},
}

@InProceedings{Nguyen2009a,
  author     = {T. T. Nguyen and H. A. Nguyen and N. H. Pham and J. M. Al-Kofahi and T. N. Nguyen},
  title      = {Clone-Aware Configuration Management},
  booktitle  = {2009 IEEE/ACM International Conference on Automated Software Engineering},
  year       = {2009},
  pages      = {123-134},
  month      = {Nov},
  doi        = {10.1109/ASE.2009.90},
  issn       = {1938-4300},
  keywords   = {configuration management;software management;AST;Clever;SCM system;abstract syntax trees;clone change management;clone consistency validating;clone detection;clone management support;clone merging;clone synchronizing;clone-aware software configuration management;code clones;real-world programs;tree editing scripts;Algorithm design and analysis;Change detection algorithms;Cloning;Collaboration;Collaborative software;Conference management;Engineering management;Merging;Software engineering;Software systems;clone editing consistency;clone management;clone synchronization;clone-aware;tree edit},
  nºtabela   = {35},
  repository = {IEEE},
}

@InProceedings{Su2016,
  author     = {Su, Fang-Hsiang and Bell, Jonathan and Harvey, Kenneth and Sethumadhavan, Simha and Kaiser, Gail and Jebara, Tony},
  title      = {Code Relatives: Detecting Similarly Behaving Software},
  booktitle  = {Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
  year       = {2016},
  series     = {FSE 2016},
  pages      = {702--714},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {2950321},
  doi        = {10.1145/2950290.2950321},
  isbn       = {978-1-4503-4218-6},
  keywords   = {Code relatives, code clones, link analysis, runtime behavior, subgraph matching},
  location   = {Seattle, WA, USA},
  numpages   = {13},
  nºtabela   = {36},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/2950290.2950321},
}

@InProceedings{Matsushita2017,
  author     = {Matsushita, Tsubasa and Sasano, Isao},
  title      = {Detecting Code Clones with Gaps by Function Applications},
  booktitle  = {Proceedings of the 2017 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation},
  year       = {2017},
  series     = {PEPM 2017},
  pages      = {12--22},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {3018892},
  doi        = {10.1145/3018882.3018892},
  isbn       = {978-1-4503-4721-1},
  keywords   = {abstract syntax tree, code clone, function application, gap},
  location   = {Paris, France},
  numpages   = {11},
  nºtabela   = {37},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/3018882.3018892},
}

@InProceedings{Semura2017,
  author     = {Y. Semura and N. Yoshida and E. Choi and K. Inoue},
  title      = {CCFinderSW: Clone Detection Tool with Flexible Multilingual Tokenization},
  booktitle  = {2017 24th Asia-Pacific Software Engineering Conference (APSEC)},
  year       = {2017},
  pages      = {654-659},
  month      = {Dec},
  doi        = {10.1109/APSEC.2017.80},
  keywords   = {programming languages;software maintenance;CCFinderSW tool;addition language;clone detection tool;code clones;extension mechanism;industry/university collaboration;multilingual tokenization;programming languages;Cloning;Computer bugs;Indexes;Java;Programming;Tools},
  nºtabela   = {38},
  repository = {IEEE},
}

@InProceedings{White2016,
  author     = {White, Martin and Tufano, Michele and Vendome, Christopher and Poshyvanyk, Denys},
  title      = {Deep Learning Code Fragments for Code Clone Detection},
  booktitle  = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
  year       = {2016},
  series     = {ASE 2016},
  pages      = {87--98},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {2970326},
  doi        = {10.1145/2970276.2970326},
  isbn       = {978-1-4503-3845-5},
  keywords   = {abstract syntax trees, code clone detection, deep learning, language models, machine learning, neural networks},
  location   = {Singapore, Singapore},
  numpages   = {12},
  nºtabela   = {39},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/2970276.2970326},
}

@InProceedings{Chang2006,
  author     = {Chang, Hung-Fu and Mockus, Audris},
  title      = {Constructing Universal Version History},
  booktitle  = {Proceedings of the 2006 International Workshop on Mining Software Repositories},
  year       = {2006},
  series     = {MSR '06},
  pages      = {76--79},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {1138002},
  doi        = {10.1145/1137983.1138002},
  isbn       = {1-59593-397-2},
  keywords   = {change history, cloning, code authorship, code copying, version control},
  location   = {Shanghai, China},
  numpages   = {4},
  nºtabela   = {40},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/1137983.1138002},
}

@InProceedings{Basit2007,
  author     = {Basit, Hamid Abdul and Jarzabek, Stan},
  title      = {Efficient Token Based Clone Detection with Flexible Tokenization},
  booktitle  = {Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
  year       = {2007},
  series     = {ESEC-FSE '07},
  pages      = {513--516},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {1287698},
  doi        = {10.1145/1287624.1287698},
  isbn       = {978-1-59593-811-4},
  keywords   = {clone detection, reverse engineering, software maintenance, token-based clone detection},
  location   = {Dubrovnik, Croatia},
  numpages   = {4},
  nºtabela   = {41},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/1287624.1287698},
}

@InProceedings{Jablonski2007a,
  author     = {Jablonski, Patricia and Hou, Daqing},
  title      = {CReN: A Tool for Tracking Copy-and-paste Code Clones and Renaming Identifiers Consistently in the IDE},
  booktitle  = {Proceedings of the 2007 OOPSLA Workshop on Eclipse Technology eXchange},
  year       = {2007},
  series     = {eclipse '07},
  pages      = {16--20},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {1328283},
  doi        = {10.1145/1328279.1328283},
  isbn       = {978-1-60558-015-9},
  keywords   = {Eclipse integrated development environment, Java, abstract syntax tree, code clone, consistent renaming, copy-and-paste programming, error detection, intent inference},
  location   = {Montreal, Quebec, Canada},
  numpages   = {5},
  nºtabela   = {42},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/1328279.1328283},
}

@InProceedings{Chen2014a,
  author     = {Chen, Kai and Liu, Peng and Zhang, Yingjun},
  title      = {Achieving Accuracy and Scalability Simultaneously in Detecting Application Clones on Android Markets},
  booktitle  = {Proceedings of the 36th International Conference on Software Engineering},
  year       = {2014},
  series     = {ICSE 2014},
  pages      = {175--186},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {2568286},
  doi        = {10.1145/2568225.2568286},
  isbn       = {978-1-4503-2756-5},
  keywords   = {Android, Software analysis, centroid, clone detection},
  location   = {Hyderabad, India},
  numpages   = {12},
  nºtabela   = {43},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/2568225.2568286},
}

@InProceedings{Funaro2010,
  author     = {Funaro, Marco and Braga, Daniele and Campi, Alessandro and Ghezzi, Carlo},
  title      = {A Hybrid Approach (Syntactic and Textual) to Clone Detection},
  booktitle  = {Proceedings of the 4th International Workshop on Software Clones},
  year       = {2010},
  series     = {IWSC '10},
  pages      = {79--80},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {1808914},
  doi        = {10.1145/1808901.1808914},
  isbn       = {978-1-60558-980-0},
  keywords   = {abstract syntax tree, clone detection},
  location   = {Cape Town, South Africa},
  numpages   = {2},
  nºtabela   = {44},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/1808901.1808914},
}

@InProceedings{Zibran2012,
  author     = {Zibran, Minhaz F. and Roy, Chanchal K.},
  title      = {IDE-based Real-time Focused Search for Near-miss Clones},
  booktitle  = {Proceedings of the 27th Annual ACM Symposium on Applied Computing},
  year       = {2012},
  series     = {SAC '12},
  pages      = {1235--1242},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {2231970},
  doi        = {10.1145/2245276.2231970},
  isbn       = {978-1-4503-0857-1},
  keywords   = {clone detection, clone search, maintenance, reengineering},
  location   = {Trento, Italy},
  numpages   = {8},
  nºtabela   = {45},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/2245276.2231970},
}

@InProceedings{Li2009,
  author     = {Li, Huiqing and Thompson, Simon},
  title      = {Clone Detection and Removal for Erlang/OTP Within a Refactoring Environment},
  booktitle  = {Proceedings of the 2009 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation},
  year       = {2009},
  series     = {PEPM '09},
  pages      = {169--178},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {1480971},
  doi        = {10.1145/1480945.1480971},
  isbn       = {978-1-60558-327-3},
  keywords   = {duplicated code, erlang, program analysis, program transformation, refactoring, wrangler},
  location   = {Savannah, GA, USA},
  numpages   = {10},
  nºtabela   = {46},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/1480945.1480971},
}

@InProceedings{Cordy2014,
  author     = {Cordy, James R. and Dean, Thomas R. and Synytskyy, Nikita},
  title      = {Practical Language-independent Detection of Near-miss Clones},
  booktitle  = {Proceedings of 24th Annual International Conference on Computer Science and Software Engineering},
  year       = {2014},
  series     = {CASCON '14},
  pages      = {2--2},
  address    = {Riverton, NJ, USA},
  publisher  = {IBM Corp.},
  acmid      = {2735524},
  location   = {Markham, Ontario, Canada},
  numpages   = {1},
  nºtabela   = {47},
  repository = {ACM},
  url        = {http://dl.acm.org/citation.cfm?id=2735522.2735524},
}

@InProceedings{Brown2010,
  author     = {Brown, Christopher and Thompson, Simon},
  title      = {Clone Detection and Elimination for Haskell},
  booktitle  = {Proceedings of the 2010 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation},
  year       = {2010},
  series     = {PEPM '10},
  pages      = {111--120},
  address    = {New York, NY, USA},
  publisher  = {ACM},
  acmid      = {1706378},
  doi        = {10.1145/1706356.1706378},
  isbn       = {978-1-60558-727-1},
  keywords   = {duplicated code, generalisation, hare, haskell, program analysis, program transformation, refactoring},
  location   = {Madrid, Spain},
  numpages   = {10},
  nºtabela   = {48},
  repository = {ACM},
  url        = {http://doi.acm.org/10.1145/1706356.1706378},
}

@InProceedings{Kim2017,
  author     = {S. Kim and S. Woo and H. Lee and H. Oh},
  title      = {VUDDY: A Scalable Approach for Vulnerable Code Clone Discovery},
  booktitle  = {2017 IEEE Symposium on Security and Privacy (SP)},
  year       = {2017},
  pages      = {595-614},
  month      = {May},
  doi        = {10.1109/SP.2017.62},
  keywords   = {program diagnostics;public domain software;security of data;source code (software);OSS;VUDDY;code clone discovery vulnerability;code clones detection;function-level granularity;length-filtering technique;open source software;scalable approach;security-aware abstraction technique;zero-day vulnerabilities;Androids;Cloning;Kernel;Linux;Scalability;Security;code clone;software vulnerability;vulnerability detection},
  nºtabela   = {49},
  repository = {IEEE},
}

@InProceedings{Zou2017,
  author     = {Zou, Deqing and Qi, Hanchao and Li, Zhen and Wu, Song and Jin, Hai and Sun, Guozhong and Wang, Sujuan and Zhong, Yuyi},
  title      = {SCVD: A new semantics-based approach for cloned vulnerable code detection},
  year       = {2017},
  volume     = {10327 LNCS},
  pages      = {325 - 344},
  address    = {Bonn, Germany},
  note       = {Cloned code;False negative rate;False positive rates;Mapping techniques;Program dependency graphs;Semantic information;Subgraph isomorphism;Vulnerability detection;},
  abstract   = {The behavior of copying existing code to reuse or modify its functionality is very common in the software development. However, when developers clone the existing code, they also clone any vulnerabilities in it. Thus, it seriously affects the security of the system. In this paper, we propose a novel semantics-based approach called SCVD for cloned vulnerable code detection. We use the full path traversal algorithm to transform the Program Dependency Graph (PDG) into a tree structure while preserving all the semantic information carried by the PDG and apply the tree to the cloned vulnerable code detection. We use the identifier name mapping technique to eliminate the impact of identifier name modification. Our key insights are converting the complex graph similarity problem into a simpler tree similarity problem and using the identifier name mapping technique to improve the effectiveness of semantics-based cloned vulnerable code detection. We have developed a practical tool based on our approach and performed a large number of experiments to evaluate the performance from three aspects, including the false positive rate, false negative rate, and time cost. The experiment results show that our approach has a significant improvement on the vulnerability detection effectiveness compared with the existing approaches and has lower time cost than subgraph isomorphism approaches. &copy; Springer International Publishing AG 2017.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  issn       = {03029743},
  journal    = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  key        = {Cloning},
  keywords   = {Codes (symbols);Computer crime;Computer software reusability;Forestry;Malware;Mapping;Semantics;Software design;Trees (mathematics);},
  language   = {English},
  nºtabela   = {50},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1007/978-3-319-60876-1_15},
}

@InProceedings{Aktas2017,
  author     = {Aktas, Mehmet S. and Kapdan, Mustafa},
  title      = {Implementation of analytical hierarchy process in detecting structural code clones},
  year       = {2017},
  volume     = {10408 LNCS},
  pages      = {652 - 664},
  address    = {Trieste, Italy},
  note       = {Analytical Hierarchy Process;Code clone;Identification algorithms;Identification approach;Identification techniques;Object-oriented software systems;Software metrics;Structural codes;},
  abstract   = {The nature and the size of data plays an important rule at the identification process of similar objects (clones). The type of utilized similarity measures is also an important factor. The nature of data and selecting the right identification algorithm appropriate to type of data should be examined thoroughly when a clone identification technique is applied. This study suggests a new methodology in software systems for minimization/prevention of code cloning. Its main contribution is to propose an Analytical Hierarchy Process based methodology at detection of code clones in object-oriented software systems, in which the software is represented by means of software metrics data at class level. The suggested clone detection model is able to select the most suitable code clone candidates by considering different correlation and distance metrics to identify code clones. To facilitate the testing and the usability of the suggested clone detection model, the system is used for detection of structural code clone. The methodology is validated by comparison with results obtained by human judges as well as by comparison with a plain structural code clone identification approach. The evaluation of the methodology is carried out in terms of accuracy and indicates promising results. &copy; Springer International Publishing AG 2017.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  issn       = {03029743},
  journal    = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  key        = {Cloning},
  keywords   = {Codes (symbols);Computer software;Object oriented programming;Soft computing;},
  language   = {English},
  nºtabela   = {51},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1007/978-3-319-62404-4_48},
}

@Article{Tekchandani2017,
  author     = {Tekchandani, Rajkumar and Bhatia, Rajesh and Singh, Maninder},
  title      = {Code clone genealogy detection on e-health system using Hadoop},
  journal    = {Computers and Electrical Engineering},
  year       = {2017},
  volume     = {61},
  pages      = {15 - 30},
  issn       = {00457906},
  note       = {Code clone;Distributed version control systems;E health;Medical record systems;Software systems;Source code repositories;Transitive closure;Transitive closure computations;},
  abstract   = {Code clone genealogy detection has been widely used in refactoring and maintenance of code in software systems. It identifies history of code clones in a source code repository. Existing code clone genealogy detection techniques are based on text similarity for extraction of different versions of program. However, existing proposals in literature for code clone genealogy detection fail to extract code clone genealogy on Git (a distributed version control system). To address this issue, we presented a new scheme, based on transitive closure computation that detects code clone genealogies in e-health system on Git. Our insight is to extract clone pairs from thousands of commits on a software system in Git by transitive closure computation. We implemented the proposed scheme using Hadoop and Neo4j on Open Medical Record System. The results prove efficacy of the proposed scheme using parameters such as transitive depth, ratio of similarity, and count of clones. &copy; 2017 Elsevier Ltd},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  key        = {Cloning},
  keywords   = {Codes (symbols);Computer software;Health;History;},
  language   = {English},
  nºtabela   = {52},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1016/j.compeleceng.2017.05.011},
}

@Article{Farhadi2015,
  author     = {Farhadi, Mohammad Reza and Fung, Benjamin C.M. and Fung, Yin Bun and Charland, Philippe and Preda, Stere and Debbabi, Mourad},
  title      = {Scalable code clone search for malware analysis},
  journal    = {Digital Investigation},
  year       = {2015},
  volume     = {15},
  pages      = {46 - 60},
  issn       = {17422876},
  note       = {Assembly code;Code mutation;Database modeling;Malware analysis;Scalable systems;Search method;Search system;Software security;},
  abstract   = {Reverse engineering is the primary step to analyze a piece of malware. After having disassembled a malware binary, a reverse engineer needs to spend extensive effort analyzing the resulting assembly code, and then documenting it through comments in the assembly code for future references. In this paper, we have developed an assembly code clone search system called ScalClone based on our previous work on assembly code clone detection systems. The objective of the system is to identify the code clones of a target malware from a collection of previously analyzed malware binaries. Our new contributions are summarized as follows: First, we introduce two assembly code clone search methods for malware analysis with a high recall rate. Second, our methods allow malware analysts to discover both exact and inexact clones at different token normalization levels. Third, we present a scalable system with a database model to support large-scale assembly code search. Finally, experimental results on real-life malware binaries suggest that our proposed methods can effectively identify assembly code clones with the consideration of different scenarios of code mutations.<br/> &copy; 2015 Elsevier Ltd.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  key        = {Codes (symbols)},
  keywords   = {Bins;Cloning;Computer crime;Malware;Reverse engineering;},
  language   = {English},
  nºtabela   = {53},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1016/j.diin.2015.06.001},
}

@Article{Sargsyan2016,
  author     = {Sargsyan, S. and Kurmangaleev, Sh. and Belevantsev, A. and Avetisyan, A.},
  title      = {Scalable and accurate detection of code clones},
  journal    = {Programming and Computer Software},
  year       = {2016},
  volume     = {42},
  number     = {1},
  pages      = {27 - 33},
  issn       = {03617688},
  note       = {Code clone;Code line;Open SSL;Program code;Program dependence graph;Second phase;Semantic analysis;Subgraphs;},
  abstract   = {A detailed description of a method for detection of code clones is described. This method is based on the semantic analysis of programs and on new algorithms that make it scalable without affecting its accuracy. The proposed method involves two phases. In the first phase, the program dependence graph (PDG) is constructed while the program is compiled. LLVM is used as the compilation infrastructure. In the second phase, similar subgraphs of maximum size that represent code clones are detected. Before starting the search for similar subgraphs, the PDG is divided into subgraphs that will be considered as potential clones of each other. To ensure scalability of the search for similar subgraphs, the composition of algorithms is used. The first algorithm checks that a pair of graphs cannot have similar subgraphs of the desired size; this is done in a linear amount of time. If this algorithm fails, another (approximate) algorithm is executed to find similar subgraphs of maximum size. After similar subgraphs have been found, the program code is additionally checked for the position of the code lines corresponding to the detected clone candidates. Tests showed that the developed tool is more accurate than similar tools, such as MOSS, CCFinder, and CloneDR. Results obtained for the projects Linux-2.6, Firefox Mozilla, LLVM/Clang, and OpenSSL are presented. &copy; 2016, Pleiades Publishing, Ltd.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  key        = {Cloning},
  keywords   = {Algorithms;Codes (symbols);Computer operating systems;Semantics;},
  language   = {English},
  nºtabela   = {54},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1134/S0361768816010072},
}

@InProceedings{Lin2015,
  author     = {Lin, Yun and Peng, Xin and Xing, Zhenchang and Zheng, Diwen and Zhao, Wenyun},
  title      = {Clone-based and interactive recommendation for modifying pasted code},
  year       = {2015},
  pages      = {520 - 531},
  address    = {Bergamo, Italy},
  note       = {Code clone;Copy-and-paste;Differencing;Recommendation;Reuse;},
  abstract   = {Developers often need to modify pasted code when programming with copy-and-paste practice. Some modifications on pasted code could involve lots of editing efforts, and any missing or wrong edit could incur bugs. In this paper, we propose a clone-based and interactive approach to recommending where and how to modify the pasted code. In our approach, we regard clones of the pasted code as the results of historical copy-and-paste operations and their differences as historical modifications on the same piece of code. Our approach first retrieves clones of the pasted code from a clone repository and detects syntactically complete differences among them. Then our approach transfers each clone difference into a modification slot on the pasted code, suggests options for each slot, and further mines modifying regulations from the clone differences. Based on the mined modifying regulations, our approach dynamically updates the suggested options and their ranking in each slot according to developer's modifications on the pasted code. We implement a proof-of-concept tool CCDemon based on our approach and evaluate its effectiveness based on code clones detected from five open source projects. The results show that our approach can identify 96.9% of the to-be-modified positions in pasted code and suggest 75.0% of the required modifications. Our human study further confirms that CCDemon can help developers to accomplish their modifications of pasted code more efficiently. &copy; 2015 ACM.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  journal    = {2015 10th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2015 - Proceedings},
  key        = {Open systems},
  keywords   = {Cloning;Codes (symbols);Copying;Open source software;Software engineering;},
  language   = {English},
  nºtabela   = {55},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1145/2786805.2786871},
}

@Article{Aktas2016,
  author     = {Aktas, Mehmet S. and Kapdan, Mustafa},
  title      = {Structural Code Clone Detection Methodology Using Software Metrics},
  journal    = {International Journal of Software Engineering and Knowledge Engineering},
  year       = {2016},
  volume     = {26},
  number     = {2},
  pages      = {307 - 332},
  issn       = {02181940},
  note       = {Code clone;Object oriented metrics;Object-oriented software metrics;Open source software projects;Software development cycles;Software maintenance costs;Software metrics;Structural codes;},
  abstract   = {Unnecessary repeated codes, also known as code clones, have not been well documented and are difficult to maintain. Code clones may become an important problem in the software development cycle, since any detected error must be fixed in all occurrences. This condition significantly increases software maintenance costs and requires effort/duration for understanding the code. This research introduces a novel methodology to minimize or prevent the code cloning problem in software projects. In particular, this manuscript is focused on the detection of structural code clones, which are defined as similarity in software structure such as design patterns. Our proposed methodology provides a solution to the class-level structural code clone detection problem. We introduce a novel software architecture that provides unification of different software quality analysis tools that take measurements for software metrics for structural code clone detection. We present an empirical evaluation of our approach and investigate its practical usefulness. We conduct a user study using human judges to detect structural code clones in three different open-source software projects. We apply our methodology to the same projects and compare results. The results show that our proposed solution is able to show high consistency compared with the results reached by the human judges. The outcome of this study also indicates that a uniform structural code clone detection system can be built on top of different software quality tools, where each tool takes measurements of different object-oriented software metrics. &copy; 2016 World Scientific Publishing Company.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  key        = {Object oriented programming},
  keywords   = {Cloning;Codes (symbols);Computer software selection and evaluation;Open source software;Open systems;Quality control;Software design;Software engineering;},
  language   = {English},
  nºtabela   = {56},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1142/S0218194016500133},
}

@Article{Li2016,
  author     = {Li, Hongzhe and Kwon, Hyuckmin and Kwon, Jonghoon and Lee, Heejo},
  title      = {CLORIFI: Software vulnerability discovery using code clone verification},
  journal    = {Concurrency Computation},
  year       = {2016},
  volume     = {28},
  number     = {6},
  pages      = {1900 - 1917},
  issn       = {15320626},
  note       = {Apache software foundations;Code clone;Concolic execution;Concolic testing;Open source projects;Program source codes;Real world projects;Software vulnerabilities;},
  abstract   = {Software vulnerability has long been considered an important threat to the system safety. A vulnerability is often reproduced because of the frequent code reuse by programmers. Security patches are usually not propagated to all code clones; however, they could be leveraged to discover unknown vulnerabilities. Static code auditing approaches are frequently proposed to scan source codes for security flaws; unfortunately, these approaches generate too many false positives. While dynamic execution analysis methods can precisely report vulnerabilities, they are ineffective in path exploration, which limits them to scale to large programs. With the purpose of detecting vulnerability in a scalable way with more preciseness, in this paper, we propose a novel mechanism, called software vulnerability discovery using Code Clone Verification (CLORIFI), that scalably discovers vulnerabilities in real world programs using code clone verification. In the beginning, we use a fast and scalable syntax-based way to find code clones in program source codes based on released security patches. Subsequently, code clones are being verified using concolic testing to dramatically decrease the false positives. In addition, we mitigate the path explosion problem by backward sensitive data tracing in concolic execution. Experiments have been conducted with real-world open-source projects (recent Linux OS distributions and program packages). As a result, we found 7 real vulnerabilities out of 63 code clones from Ubuntu 14.04 LTS (Canonical, London, UK) and 10 vulnerabilities out of 40 code clones from CentOS 7.0 (The CentOS Project(community contributed)). Furthermore, we confirmed more code clone vulnerabilities in various versions of programs including Rsyslog (Open Source(Original author: Rainer Gerhards)), Apache (Apache Software Foundation, Forest Hill, Maryland, USA) and Firefox (Mozilla Corporation, Mountain View, California, USA). In order to evaluate the effectiveness of vulnerability verification in a systematic way, we also utilized Juliet Test Suite as measurement objects. The results show that CLORIFI achieves 98% accuracy with 0 false positives. Copyright &copy; 2015 John Wiley & Sons, Ltd.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  key        = {Open systems},
  keywords   = {Cloning;Codes (symbols);Computer operating systems;Computer programming;Java programming language;Linux;Mobile security;Open source software;Software packages;Software testing;Verification;},
  language   = {English},
  nºtabela   = {57},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1002/cpe.3532},
}

@Article{Fordos2016,
  author     = {Fordos, Viktoria and Toth, Melinda},
  title      = {Identifying code clones with refactorerl},
  journal    = {Acta Cybernetica},
  year       = {2016},
  volume     = {22},
  number     = {3},
  pages      = {553 - 571},
  issn       = {0324721X},
  note       = {Clone detection algorithms;Code clone;Identifying code;Maintenance cost;Source codes;Tools and techniques;},
  abstract   = {Code clones, the results of "copy&amp;paste programming", have a negative impact on software maintenance. Therefore several tools and techniques have been developed to identify them in the source code. Most of them concentrate on imperative, well known languages, while in this paper, we give an AST/metric based clone detection algorithm for the functional programming language Erlang. We propose a standalone solution that does not overload users with results that are insignificant from the point of view of the user. We emphasise that the maintenance costs can be decreased by using our solution, because the programmers need to deal only with important issues.<br/>},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  key        = {Functional programming},
  keywords   = {Cloning;Codes (symbols);Computational linguistics;Computer programming;},
  language   = {English},
  nºtabela   = {58},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.14232/actacyb.22.3.2016.1},
}

@InProceedings{Mahajan2014,
  author     = {G. Mahajan and M. Bharti},
  title      = {Implementing a 3-way approach of clone detection and removal using PC Detector tool},
  booktitle  = {2014 IEEE International Advance Computing Conference (IACC)},
  year       = {2014},
  pages      = {1435-1441},
  month      = {Feb},
  doi        = {10.1109/IAdCC.2014.6779537},
  keywords   = {program diagnostics;software maintenance;PC detector tool;clone removal;code clone detection;code duplication;copy paste programming;evolution process;model based visual analysis;pattern based semantic analysis;software engineering;software maintainability;syntactical code analysis;Analytical models;Cloning;Detectors;Maintenance engineering;Semantics;Software;Unified modeling language;Code clones;Model clones;PC Detector;Software Cloning},
  nºtabela   = {59},
  repository = {IEEE},
}

@InProceedings{Cuomo2012,
  author     = {A. Cuomo and A. Santone and U. Villano},
  title      = {A novel approach based on formal methods for clone detection},
  booktitle  = {2012 6th International Workshop on Software Clones (IWSC)},
  year       = {2012},
  pages      = {8-14},
  month      = {June},
  doi        = {10.1109/IWSC.2012.6227879},
  keywords   = {Java;calculus of communicating systems;formal verification;Java bytecode;calculus of communicating systems;code clone detection;formal method;Abstracts;Algebra;Cloning;Java;Prototypes;Semantics;Syntactics;CCS;Clone detection;Formal Methods},
  nºtabela   = {60 },
  repository = {IEEE},
}

@InProceedings{Li2011,
  author     = {Li, Huiqing and Thompson, Simon},
  title      = {Incremental clone detection and elimination for Erlang programs},
  year       = {2011},
  volume     = {6603 LNCS},
  pages      = {356 - 370},
  address    = {Saarbrucken, Germany},
  note       = {Code clone detection;Erlang;Program analysis;Program transformation;Refactorings;Software maintenance;Wrangler;},
  abstract   = {A well-known bad code smell in refactoring and software maintenance is the existence of code clones, which are code fragments that are identical or similar to one another. This paper describes an approach to incrementally detecting 'similar' code based on the notion of least-general common abstraction, or anti-unification, as well as a framework for user-controlled incremental elimination of code clones within the context of Erlang programs. The clone detection algorithm proposed in this paper achieves 100% precision, high recall rate, and is user-customisable regarding the granularity of the clone classes reported. By detecting and eliminating clones in an incremental way, we make it possible for the tool to be used in an interactive way even with large codebases. Both the clone detection and elimination functionalities are integrated with Wrangler, a tool for interactive refactoring of Erlang programs. We evaluate the approach with various case studies. &copy; 2011 Springer-Verlag.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  issn       = {03029743},
  journal    = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  key        = {Computer software maintenance},
  keywords   = {Cloning;Software engineering;},
  language   = {English},
  nºtabela   = {61},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1007/978-3-642-19811-3_25},
}

@InProceedings{Shi2013,
  author     = {Qing Qing Shi and Li Ping Zhang and Fan Jun Meng and Dong Sheng Liu},
  title      = {A novel detection approach for statement clones},
  booktitle  = {2013 IEEE 4th International Conference on Software Engineering and Service Science},
  year       = {2013},
  pages      = {27-30},
  month      = {May},
  doi        = {10.1109/ICSESS.2013.6615249},
  issn       = {2327-0586},
  keywords   = {C++ language;Java;public domain software;software maintenance;C language;C++ language;Java language;SaCD;clone detection approach;clone detection tool;code clones;code copying;code modification;code pasting;open source software systems;repeated token substrings;software development;software maintenance;statement clones;statement granularity;suffix array;Arrays;Cloning;Java;Random access memory;Software;DC3 algorithm;clone detection;code clone;suffix array;token string},
  nºtabela   = {62},
  repository = {IEEE},
}

@InProceedings{Murakami2012,
  author     = {Murakami, Hiroaki and Hotta, Keisuke and Higo, Yoshiki and Igaki, Hiroshi and Kusumoto, Shinji},
  title      = {Folding repeated instructions for improving token-based code clone detection},
  year       = {2012},
  pages      = {64 - 73},
  address    = {Riva del Garda, Trento, Italy},
  note       = {Code clone;Code clone detection;Deep sources;Detection methods;False positive;False-positive reduction;High scalabilities;Intermediate structures;Overlapped codes;Quantitative evaluation;Source codes;Suffix arrays;},
  abstract   = {A variety of code clone detection methods have been proposed before now. However, only a small part of them is widely used. Widely-used methods are line-based and token-based ones. They have high scalability because they neither require deep source code analysis nor constructing complex intermediate structures for the detection. High scalability is one of the big advantages in code clone detection tools. On the other hand, line/token-based detections yield many false positives. One of the factors is the presence of repeated instructions in the source code. For example, herein we assume that there are consecutive three printf statements in C source code. If we apply a token-based detection to them, the former two statements are detected as a code clone of the latter two statements. However, such overlapped code clones are redundant and so not useful for developers. In this paper, we propose a new detection method that is free from the influence of the presence of repeated instructions. The proposed method transforms every of repeated instructions into a special form, and then it detects code clones using a suffix array algorithm. The transformation prevents many false positives from being detected. Also, the detection speed remains. The proposed detection method has already been developed as a software tool, FRISC. We confirmed the usefulness of the proposed method by conducting a quantitative evaluation of FRISC with Bellon's oracle. &copy; 2012 IEEE.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  journal    = {Proceedings - 2012 IEEE 12th International Working Conference on Source Code Analysis and Manipulation, SCAM 2012},
  key        = {Cloning},
  keywords   = {Computer programming languages;Scalability;},
  language   = {English},
  nºtabela   = {63},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1109/SCAM.2012.21},
}

@InProceedings{Kodhai2010a,
  author     = {E. Kodhai and S. Kanmani and A. Kamatchi and R. Radhika and B. V. Saranya},
  title      = {Detection of Type-1 and Type-2 Code Clones Using Textual Analysis and Metrics},
  booktitle  = {2010 International Conference on Recent Trends in Information, Telecommunication and Computing},
  year       = {2010},
  pages      = {241-243},
  month      = {March},
  doi        = {10.1109/ITC.2010.55},
  keywords   = {software maintenance;software metrics;C source code;Type-1code clone;Type-2 code clone;functional clone;textual analysis;textual metrics;Application software;Cloning;Information analysis;Java;Plagiarism;Programming profession;Software maintenance;Software metrics;Software systems;Telecommunication computing;Clone Detection;Functional Clones;Software Metrics;String-matching;Text-based Comparison},
  nºtabela   = {64 },
  repository = {IEEE},
}

@InProceedings{Santone2011,
  author     = {Santone, Antonella},
  title      = {Clone detection through process algebras and Java Bytecode},
  year       = {2011},
  pages      = {73 - 74},
  address    = {Waikiki, Honolulu, HI, United states},
  note       = {CCS;Clone detection;Java byte codes;Process algebras;Source codes;},
  abstract   = {In this paper we present a formal method-based approach in detecting source code clones by means of analysing and comparing the Java Bytecode that is produced when the source code is compiled. A preliminary investigation has been also conducted to assess the validity of the proposed approach. &copy; 2011 ACM.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  issn       = {02705257},
  journal    = {Proceedings - International Conference on Software Engineering},
  key        = {Formal methods},
  keywords   = {Cloning;Computer software;Java programming language;},
  language   = {English},
  nºtabela   = {65},
  repository = {EI COMPENDEX},
  url        = {http://dx.doi.org/10.1145/1985404.1985422},
}

@InProceedings{Tekchandani2013,
  author     = {R. Tekchandani and R. K. Bhatia and M. Singh},
  title      = {Semantic code clone detection using parse trees and grammar recovery},
  booktitle  = {Confluence 2013: The Next Generation Information Technology Summit (4th International Conference)},
  year       = {2013},
  pages      = {41-46},
  month      = {Sept},
  doi        = {10.1049/cp.2013.2291},
  keywords   = {grammars;software engineering;trees (mathematics);code duplication;formal grammars;grammar recovery;parse trees;program dependence graphs;semantic code clone detection;similar code fragments;software development;Code Clones;Grammar Recovery;Parse Trees;Semantic Code Clones},
  nºtabela   = {66},
  repository = {IEEE},
}

@InProceedings{Kraft2008,
  author     = {Kraft, Nicholas A. and Bonds, Brandon W. and Smith, Randy K.},
  title      = {Cross-language clone detection},
  year       = {2008},
  pages      = {54 - 59},
  address    = {San Francisco Bay, CA, United states},
  note       = {Clone detection;Clone detection algorithms;Code duplication;Common software;Multiple languages;Software systems;Tree structures;Visual Basic .NET;},
  abstract   = {Code duplication is a common software development practice that introduces several similar or identical segments of code, or code clones. In addition, there is currently a trend towards the use of multiple languages in the development of software systems. While there has been much work on clone detection and increased interest in studies of multi-language software systems, there have been no studies of code clones that span multiple languages, which we term cross-language code clones. In this paper we describe an approach for cross-language clone detection. We then introduce a tool, which is based on the CodeDOM library that is included with the Microsoft .NET Framework, to demonstrate the existence of cross-language clones in a real software system that contains both C# and Visual Basic. NET source code. Because our clone detection algorithm operates on a tree structure, other tree-based clone detection algorithms could be substituted in the implementation of our tool.},
  copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
  journal    = {20th International Conference on Software Engineering and Knowledge Engineering, SEKE 2008},
  key        = {Cloning},
  keywords   = {Computer software;Knowledge engineering;Linguistics;Signal detection;Tools;Trees (mathematics);Visual BASIC;},
  language   = {English},
  nºtabela   = {67},
  repository = {EI COMPENDEX},
}

@InProceedings{Yuki2017,
  author     = {Y. Yuki and Y. Higo and S. Kusumoto},
  title      = {A technique to detect multi-grained code clones},
  booktitle  = {2017 IEEE 11th International Workshop on Software Clones (IWSC)},
  year       = {2017},
  pages      = {1-7},
  month      = {Feb},
  doi        = {10.1109/IWSC.2017.7880510},
  keywords   = {software maintenance;source code (software);coarse-to-fine-grained-clone detection;code fragment detection;detection target granularity;multigrained code clone detection;software maintenance;source code;Cloning;Computer bugs;Filtering;Information science;Java;Libraries;Software;code-fragment-level clone;file-level clone;method-level clone;multi-grained detection technique},
  nºtabela   = {68},
  repository = {IEEE},
}

@InProceedings{Maeda2009,
  author     = {K. Maeda},
  title      = {Code clone detection using parsing actions},
  booktitle  = {2009 9th International Symposium on Communications and Information Technology},
  year       = {2009},
  pages      = {762-763},
  month      = {Sept},
  doi        = {10.1109/ISCIT.2009.5341139},
  keywords   = {XML;computational linguistics;formal languages;grammars;program compilers;source coding;PALEX source code representation;XML;code clone detection technique;compiler process;language independency;lexical formatting information;parsing action;syntactic point;syntax sensitive token-based approach;Arithmetic;Cloning;Computer bugs;Information analysis;Information science;Productivity;Software tools;Testing;White spaces;XML},
  nºtabela   = {69 },
  repository = {IEEE},
}

@InProceedings{Yuan2012a,
  author     = {Y. Yuan and Y. Guo},
  title      = {Boreas: an accurate and scalable token-based approach to code clone detection},
  booktitle  = {2012 Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering},
  year       = {2012},
  pages      = {286-289},
  month      = {Sept},
  doi        = {10.1145/2351676.2351725},
  keywords   = {Java;Linux;matrix algebra;program debugging;program testing;software engineering;Boreas;Deckard syntactic-based tool;JDK 7 source code;Linux kernel 2.6.38.6 source code;characteristic matrices;counting-based method;execution time reduction;program code clone detection;scalable token-based approach;software engineering;Code clone detection;count matrix;count vector},
  nºtabela   = {70},
  repository = {IEEE},
}

@InProceedings{Karus2015,
  author     = {S. Karus and K. Kilgi},
  title      = {Code clone detection using wavelets},
  booktitle  = {2015 IEEE 9th International Workshop on Software Clones (IWSC)},
  year       = {2015},
  pages      = {8-14},
  month      = {March},
  doi        = {10.1109/IWSC.2015.7069883},
  keywords   = {program diagnostics;software maintenance;source code (software);wavelet transforms;code clone detection;code maintenance;wavelet analysis;Cloning;Detection algorithms;Detectors;Semantics;Wavelet analysis;Wavelet transforms;code clones;experiment;wavelets},
  nºtabela   = {71},
  repository = {IEEE},
}

@InProceedings{Krutz2013,
  author     = {D. E. Krutz and E. Shihab},
  title      = {CCCD: Concolic code clone detection},
  booktitle  = {2013 20th Working Conference on Reverse Engineering (WCRE)},
  year       = {2013},
  pages      = {489-490},
  month      = {Oct},
  doi        = {10.1109/WCRE.2013.6671332},
  issn       = {1095-1350},
  keywords   = {program diagnostics;software maintenance;software tools;CCCD;Concolic Code Clone Discovery tool;clone detection tool;concolic analysis;concolic code clone detection;type-4 clones;Cloning;Conferences;IEEE Computer Society;Software;Software engineering;Software reliability},
  nºtabela   = {72},
  repository = {IEEE},
}

@InProceedings{Kamiya2015,
  author     = {T. Kamiya},
  title      = {An execution-semantic and content-and-context-based code-clone detection and analysis},
  booktitle  = {2015 IEEE 9th International Workshop on Software Clones (IWSC)},
  year       = {2015},
  pages      = {1-7},
  month      = {March},
  doi        = {10.1109/IWSC.2015.7069882},
  keywords   = {program diagnostics;programming languages;public domain software;software metrics;source code (software);arbitrary-granularity model;clone metrics;code search;content-and-context-based code-clone detection;control sentences;execution semantic;execution-semantic-based code-clone detection;lambda;lazy evaluation;open-source products;programming languages;Cloning;Computer languages;Context;Heuristic algorithms;Object oriented modeling;Prototypes;Visualization},
  nºtabela   = {73},
  repository = {IEEE},
}

@InProceedings{Raheja2013,
  author     = {K. Raheja and R. K. Tekchandani},
  title      = {An efficient code clone detection model on Java byte code using hybrid approach},
  booktitle  = {Confluence 2013: The Next Generation Information Technology Summit (4th International Conference)},
  year       = {2013},
  pages      = {16-21},
  month      = {Sept},
  doi        = {10.1049/cp.2013.2287},
  keywords   = {Java;software maintenance;software metrics;software reliability;source code (software);Java byte code;Java source code;code clone detection model;hybrid clone detection technique;software cloning;software engineering;software metrics;Byte code;Clone detection;Hybrid approach;Potential Clones;metrics computation},
  nºtabela   = {74},
  repository = {IEEE},
}

@InProceedings{Patil2015,
  author     = {R. V. Patil and S. D. Joshi and S. V. Shinde and D. A. Ajagekar and S. D. Bankar},
  title      = {Code clone detection using decentralized architecture and code reduction},
  booktitle  = {2015 International Conference on Pervasive Computing (ICPC)},
  year       = {2015},
  pages      = {1-6},
  month      = {Jan},
  doi        = {10.1109/PERVASIVE.2015.7087126},
  keywords   = {program debugging;software reusability;PDG;code clone detection;code fragment;code reduction;decentralized architecture;generative programming approach;reuse approach;software development process;type-I clones;type-II clones;Cloning;Complexity theory;Computer architecture;Detectors;Measurement;Programming;Software;Bug;CCFinder;Duploc;PDG;code fragment;distributed system;merging;parallel processing;refactoring;restructuring},
  nºtabela   = {75},
  repository = {IEEE},
}

@InProceedings{Avetisyan2015,
  author     = {A. Avetisyan and S. Kurmangaleev and S. Sargsyan and M. Arutunian and A. Belevantsev},
  title      = {LLVM-based code clone detection framework},
  booktitle  = {2015 Computer Science and Information Technologies (CSIT)},
  year       = {2015},
  pages      = {100-104},
  month      = {Sept},
  doi        = {10.1109/CSITechnol.2015.7358259},
  keywords   = {Linux;program compilers;program diagnostics;source code (software);CloneDR. tools;LLVM bitcode;LLVM-based code clone detection framework;Linux-2.6 kernel;MOSS tools;code fragments;lexical approach;metrics based approach;program semantic analysis;source code;syntactic based approach;textual approach;Algorithm design and analysis;Approximation algorithms;Cloning;Clustering algorithms;Image edge detection;Measurement;Semantics;LLVM;code clone;program dependence graph},
  nºtabela   = {76},
  repository = {IEEE},
}

@InProceedings{Bansal2014,
  author     = {G. Bansal and R. Tekchandani},
  title      = {Selecting a set of appropriate metrics for detecting code clones},
  booktitle  = {2014 Seventh International Conference on Contemporary Computing (IC3)},
  year       = {2014},
  pages      = {484-488},
  month      = {Aug},
  doi        = {10.1109/IC3.2014.6897221},
  keywords   = {C language;software maintenance;software metrics;source code (software);C language software system;code clone detection;maintenance problem;software development;software metrics;Cloning;Complexity theory;Software engineering;Software metrics;Software systems;clone class;clone detection;clone pair;code cloning;software metrics},
  nºtabela   = {77},
  repository = {IEEE},
}

@InProceedings{Jang2012,
  author     = {J. Jang and A. Agrawal and D. Brumley},
  title      = {ReDeBug: Finding Unpatched Code Clones in Entire OS Distributions},
  booktitle  = {2012 IEEE Symposium on Security and Privacy},
  year       = {2012},
  pages      = {48-62},
  month      = {May},
  doi        = {10.1109/SP.2012.13},
  issn       = {1081-6011},
  keywords   = {C++ language;Linux;operating system kernels;program debugging;safety-critical software;software packages;C++ project;Debian Lenny/Squeeze;Debian Squeeze package;Debian/Ubuntu security-related patches;Linux kernel;OS-distribution scale code bases;ReDeBug;Source Forge C;Ubuntu Maverick/Oneiric;buggy code;code clone detection;commodity desktop machine;false detection rate;latent bug;security-critical problem;source code database;syntax-based approach;unpatched code clone;vulnerable code;Cloning;Computer bugs;Context;Kernel;Linux;Scalability;Security;debug;scalability;unpatched code clone},
  nºtabela   = {78},
  repository = {IEEE},
}

@InProceedings{Li2017,
  author     = {L. Li and H. Feng and W. Zhuang and N. Meng and B. Ryder},
  title      = {CCLearner: A Deep Learning-Based Clone Detection Approach},
  booktitle  = {2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  year       = {2017},
  pages      = {249-260},
  month      = {Sept},
  doi        = {10.1109/ICSME.2017.46},
  keywords   = {learning (artificial intelligence);pattern classification;program debugging;program diagnostics;public domain software;software maintenance;software reusability;source code (software);trees (mathematics);AST;BigCloneBench;CCLEARNER;CCLearner;abstract syntax trees;bug fixes;classifier training;clone detection tools;code locations;code reuse;codebase;competitive clone detection effectiveness;deep learning-based clone detection approach;method-level code clones;program changes;programming productivity;software development;software maintenance;source code tokenization;token-based clone detection approach;tree-matching algorithms;Cloning;Feature extraction;Machine learning;Neural networks;Testing;Tools;Training;clone detection;deep learning;empirical},
  nºtabela   = {79},
  repository = {IEEE79},
}

@InProceedings{Gabel2008,
  author     = {M. Gabel and L. Jiang and Z. Su},
  title      = {Scalable detection of semantic clones},
  booktitle  = {2008 ACM/IEEE 30th International Conference on Software Engineering},
  year       = {2008},
  pages      = {321-330},
  month      = {May},
  doi        = {10.1145/1368088.1368132},
  issn       = {0270-5257},
  keywords   = {Linux;data flow graphs;program compilers;program control structures;program debugging;trees (mathematics);Linux kernel;PDG subgraphs;bugs location;code clones;contiguous syntax;graph similarity problem;isomorphic PDG;million-line open source projects;program code fragments;program dependence graphs;program design;program fragments;program representations;real world code bases;redundant code;reordered statements;scalable clone detection algorithm;scalable detection;semantic clones;semantic information;semantically equivalent control structures;structured syntax;tree similarity problem;Cloning;Computer bugs;Computer science;Detection algorithms;Kernel;Linux;Performance evaluation;Software algorithms;Software maintenance;Tree graphs;clone detection;program dependence graph;refactoring;software maintenance},
  nºtabela   = {80},
  repository = {IEEE},
}

@InProceedings{Higo2011,
  author     = {Y. Higo and S. Kusumoto},
  title      = {Code Clone Detection on Specialized PDGs with Heuristics},
  booktitle  = {2011 15th European Conference on Software Maintenance and Reengineering},
  year       = {2011},
  pages      = {75-84},
  month      = {March},
  doi        = {10.1109/CSMR.2011.12},
  issn       = {1534-5351},
  keywords   = {directed graphs;software engineering;PDG detection heuristics;PDG-based code clone detection;open source systems;program dependency graph;software systems;Cloning;Computational complexity;Computational efficiency;Image edge detection;Information science;Merging;Software systems;code clone;program dependency graph},
  nºtabela   = {81},
  repository = {IEEE},
}

@InProceedings{Keivanloo2015,
  author     = {I. Keivanloo and F. Zhang and Y. Zou},
  title      = {Threshold-free code clone detection for a large-scale heterogeneous Java repository},
  booktitle  = {2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
  year       = {2015},
  pages      = {201-210},
  month      = {March},
  doi        = {10.1109/SANER.2015.7081830},
  issn       = {1534-5351},
  keywords   = {Java;public domain software;F-measure;clone benchmark;dissimilarity threshold;heterogeneous Java repository;method granularity;open source Java projects;software ecosystems;threshold-free code clone detection algorithms;type-3 clone detection tools;Benchmark testing;Cloning;Clustering algorithms;Google;Java;Optimization methods;Software systems;clone detection;clone search;clustering;large-scale repository;threshold-free;unsupervised learning},
  nºtabela   = {82},
  repository = {IEEE},
}

@InProceedings{Yu2017,
  author     = {D. Yu and J. Wang and Q. Wu and J. Yang and J. Wang and W. Yang and W. Yan},
  title      = {Detecting Java Code Clones with Multi-granularities Based on Bytecode},
  booktitle  = {2017 IEEE 41st Annual Computer Software and Applications Conference (COMPSAC)},
  year       = {2017},
  volume     = {1},
  pages      = {317-326},
  month      = {July},
  doi        = {10.1109/COMPSAC.2017.104},
  issn       = {0730-3157},
  keywords   = {Java;software maintenance;software tools;source coding;Java bytecode;Java code clone detection;Java source code;block level;block-level code fragments;code clone detection method;duplicate code sequences;instruction sequences;method call sequences;method level;software re-engineering;Cloning;Feature extraction;Java;Semantics;Software;Syntactics;Tools;Java bytecode;code clone detection;instruction;method call;multi-granularities},
  nºtabela   = {83},
  repository = {IEEE},
}

@InProceedings{Jung2010,
  author     = {W. Jung and C. Wu and E. Lee},
  title      = {WSIM: Detecting Clone Pages Based on 3-Levels of Similarity Clues},
  booktitle  = {2010 IEEE/ACIS 9th International Conference on Computer and Information Science},
  year       = {2010},
  pages      = {702-707},
  month      = {Aug},
  doi        = {10.1109/ICIS.2010.102},
  keywords   = {Internet;Web applications;clone page detection;code clones;dynamic selection;passed parameter;similarity clue;static selection;target entities;web page;Accuracy;Cloning;Complexity theory;Noise;Software;Visualization;Web pages;page clone;similarity;web application},
  nºtabela   = {84},
  repository = {IEEE},
}

@InProceedings{Murakami2013,
  author     = {H. Murakami and K. Hotta and Y. Higo and H. Igaki and S. Kusumoto},
  title      = {Gapped code clone detection with lightweight source code analysis},
  booktitle  = {2013 21st International Conference on Program Comprehension (ICPC)},
  year       = {2013},
  pages      = {93-102},
  month      = {May},
  doi        = {10.1109/ICPC.2013.6613837},
  issn       = {1092-8138},
  keywords   = {program diagnostics;software tools;text analysis;trees (mathematics);AST-based technique;Bellon benchmark;CDSW;LCS algorithm;PDG-based technique;Smith-Waterman algorithm;abstract syntax tree;gapped code clone detection;metric-based technique;program dependency graph;software tool;source code analysis;text-based technique;Accuracy;Algorithm design and analysis;Benchmark testing;Cloning;Educational institutions;Software algorithms;Software systems;Code Clone;Program Analysis;Software Maintenance;Tool Comparison},
  nºtabela   = {85},
  repository = {IEEE},
}

@InProceedings{Keivanloo2012b,
  author     = {I. Keivanloo and J. Rilling},
  title      = {Clone detection meets Semantic Web-based transitive closure computation},
  booktitle  = {2012 First International Workshop on Realizing AI Synergies in Software Engineering (RAISE)},
  year       = {2012},
  pages      = {12-16},
  month      = {June},
  doi        = {10.1109/RAISE.2012.6227963},
  keywords   = {directed graphs;inference mechanisms;inheritance;object-oriented programming;semantic Web;tree data structures;artificial intelligence;directed acyclic graphs;discourse knowledge modeling;inference engines;inheritance trees;object-oriented source code;semantic Web-based transitive closure computation;semantic source code clone detection;software analysis research;source code patterns;Cloning;Communities;Context;OWL;Pattern matching;Semantics;Clone detection;Semantic Web;object oriented},
  nºtabela   = {86},
  repository = {IEEE},
}

@InProceedings{Alomari2018,
  author     = {H. W. Alomari and M. Stephan},
  title      = {Towards slice-based semantic clone detection},
  booktitle  = {2018 IEEE 12th International Workshop on Software Clones (IWSC)},
  year       = {2018},
  pages      = {58-59},
  month      = {March},
  doi        = {10.1109/IWSC.2018.8327320},
  keywords   = {Linux;operating system kernels;software maintenance;Linux kernel;cloned slices;code clones;established clone detectors;slice-based semantic clone detection;software slice clone detection;software systems;Cloning;Kernel;Linux;Measurement;Semantics;Tools},
  nºtabela   = {87},
  repository = {IEEE},
}

@InProceedings{Liu2017,
  author     = {Z. Liu and Q. Wei and Y. Cao},
  title      = {VFDETECT: A vulnerable code clone detection system based on vulnerability fingerprint},
  booktitle  = {2017 IEEE 3rd Information Technology and Mechatronics Engineering Conference (ITOEC)},
  year       = {2017},
  pages      = {548-553},
  month      = {Oct},
  doi        = {10.1109/ITOEC.2017.8122356},
  keywords   = {cryptography;public domain software;software maintenance;VFDETECT;appropriate code blocks;bitmap;code sequence;hash function;high-efficiency methods;innovative fingerprint model;multiple code modification methods;open source software;preprocessed code blocks;real-world datasets detection;redundancy inserting;software security;vulnerability code;vulnerability fingerprint;vulnerable code clone detection system;vulnerable code reuse;Cloning;Data structures;Feature extraction;Fingerprint recognition;Kernel;Linux;code clone;vulnerability detection;vulnerability fingerprint},
  nºtabela   = {88},
  repository = {IEEE},
}

@InProceedings{Farhadi2014,
  author     = {M. R. Farhadi and B. C. M. Fung and P. Charland and M. Debbabi},
  title      = {BinClone: Detecting Code Clones in Malware},
  booktitle  = {2014 Eighth International Conference on Software Security and Reliability (SERE)},
  year       = {2014},
  pages      = {78-87},
  month      = {June},
  doi        = {10.1109/SERE.2014.21},
  keywords   = {invasive software;program diagnostics;reverse engineering;Bin Clone;BinClone;assembly code analysis;assembly code clone detection system;code clone fragment identification;commented assembly code archiving;deterministic clone detection method;inexact clone discovery;malware analysis;malware behaviour understanding;malware binaries;malware disassembly;malware repository;recall rate;reverse engineers;token normalization level;Assembly;Cloning;Detectors;Feature extraction;Malware;Registers;Vectors;Assembly Code Clone Detection;Binary Analysis;Malware Analysis;Reverse Engineering},
  nºtabela   = {89},
  repository = {IEEE},
}

@InProceedings{Saini2016,
  author     = {V. Saini and H. Sajnani and J. Kim and C. Lopes},
  title      = {SourcererCC and SourcererCC-I: Tools to Detect Clones in Batch Mode and during Software Development},
  booktitle  = {2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)},
  year       = {2016},
  pages      = {597-600},
  month      = {May},
  keywords   = {software engineering;source code (software);SourcererCC;SourcererCC-I;batch mode;code-block comparisons;interproject repositories;large-scale clone detection;near-miss clone detection;optimized inverted-index;required token-comparisons;software development;source-code repositories;standard workstation;token-based clone detector;type 3 clone detection;Cloning;Detectors;Indexes;Navigation;Scalability;Software;Standards;Code cloning;Large scale clone detection;eclipse plugin;scalable tool},
  nºtabela   = {90},
  repository = {IEEE},
}

@InProceedings{Lazar2014,
  author     = {F. M. Lazar and O. Banias},
  title      = {Clone detection algorithm based on the Abstract Syntax Tree approach},
  booktitle  = {2014 IEEE 9th IEEE International Symposium on Applied Computational Intelligence and Informatics (SACI)},
  year       = {2014},
  pages      = {73-78},
  month      = {May},
  doi        = {10.1109/SACI.2014.6840038},
  keywords   = {C language;computer science education;programming;source code (software);trees (mathematics);AST;C programming language;abstract syntax tree approach;program code analysis;programming techniques class;source code clone detection algorithm;three phase clone detection algorithm;Abstracts;Algorithm design and analysis;Cloning;Computer languages;Detection algorithms;Software systems;Syntactics},
  nºtabela   = {91},
  repository = {IEEE},
}

@InProceedings{Higo2011a,
  author     = {Y. Higo and U. Yasushi and M. Nishino and S. Kusumoto},
  title      = {Incremental Code Clone Detection: A PDG-based Approach},
  booktitle  = {2011 18th Working Conference on Reverse Engineering},
  year       = {2011},
  pages      = {3-12},
  month      = {Oct},
  doi        = {10.1109/WCRE.2011.11},
  issn       = {1095-1350},
  keywords   = {directed graphs;public domain software;software maintenance;PDG based incremental code clone detection technique;open source software;program dependency graph;prototype tool;software maintenance;software system;Approximation algorithms;Cloning;Context;Databases;Image edge detection;Prototypes;Software systems;Code clone;Incremental detection},
  nºtabela   = {92},
  repository = {IEEE},
}

@InProceedings{Kawaguchi2009,
  author     = {S. Kawaguchi and T. Yamashina and H. Uwano and K. Fushida and Y. Kamei and M. Nagura and H. Iida},
  title      = {SHINOBI: A Tool for Automatic Code Clone Detection in the IDE},
  booktitle  = {2009 16th Working Conference on Reverse Engineering},
  year       = {2009},
  pages      = {313-314},
  month      = {Oct},
  doi        = {10.1109/WCRE.2009.36},
  issn       = {1095-1350},
  keywords   = {software maintenance;software reliability;software tools;Microsoft Visual Studio;SHINOBI;automatic code clone detection;software program maintainability;software program reliability;Cloning;Event detection;Information science;Laboratories;Large-scale systems;Maintenance engineering;Programming profession;Reliability engineering;Reverse engineering;Software maintenance;code clone;software development environment;software tool},
  nºtabela   = {93},
  repository = {IEEE},
}

@InProceedings{Ali2011,
  author     = {A. F. M. Ali and S. Sulaiman and S. M. Syed-Mohamad},
  title      = {An enhanced generic pipeline model for code clone detection},
  booktitle  = {2011 Malaysian Conference in Software Engineering},
  year       = {2011},
  pages      = {434-438},
  month      = {Dec},
  doi        = {10.1109/MySEC.2011.6140712},
  keywords   = {software maintenance;software reusability;code clone detection;code reusability approach;copy-paste technique;enhanced generic pipeline model;software development;software maintainability;Adaptation models;Cloning;Load modeling;Maintenance engineering;Manganese;Pipelines;Software;Code clone;code clone detection;generic pipeline model;maintainability;reusability},
  nºtabela   = {94},
  repository = {IEEE},
}

@InProceedings{Rajakumari2013,
  author     = {K. E. Rajakumari and T. Jebarajan},
  title      = {A novel approach to effective detection and analysis of code clones},
  booktitle  = {Third International Conference on Innovative Computing Technology (INTECH 2013)},
  year       = {2013},
  pages      = {287-290},
  month      = {Aug},
  doi        = {10.1109/INTECH.2013.6653701},
  keywords   = {data mining;program diagnostics;software quality;text analysis;code clone analysis;code clone detection;data mining technique;software engineering;software maintenance;software quality;software system quality degradation;Cloning;Data mining;Educational institutions;Manuals;Software systems;Testing;Bad smells;Code clones;Data Mining Technique;Software Engineering},
  nºtabela   = {95},
  repository = {IEEE},
}

@InProceedings{Dong2012,
  author     = {L. Dong and J. Wang and L. Chen},
  title      = {Modular Heap Abstraction-Based Code Clone Detection for Heap-Manipulating Programs},
  booktitle  = {2012 12th International Conference on Quality Software},
  year       = {2012},
  pages      = {197-200},
  month      = {Aug},
  doi        = {10.1109/QSIC.2012.37},
  issn       = {1550-6002},
  keywords   = {iterative methods;program diagnostics;software maintenance;C benchmark program;context sensitive fix point iteration algorithm;field sensitive fix point iteration algorithm;heap-manipulating program;modular heap abstraction;semantic-based clone detection;software evolution;software maintenance;syntax-based clone detector;Abstracts;Cloning;Semantics;Software;Software engineering;Syntactics;USA Councils;code clone detection;heap-manipulating programs;modular heap abstraction;procedural summaries},
  nºtabela   = {96},
  repository = {IEEE},
}

@InProceedings{Wang2017,
  author     = {M. Wang and P. Wang and Y. Xu},
  title      = {CCSharp: An Efficient Three-Phase Code Clone Detector Using Modified PDGs},
  booktitle  = {2017 24th Asia-Pacific Software Engineering Conference (APSEC)},
  year       = {2017},
  pages      = {100-109},
  month      = {Dec},
  doi        = {10.1109/APSEC.2017.16},
  keywords   = {program diagnostics;public domain software;software reusability;CCSharp;PDG's structure modification;clone detection;code clones;downscale PDG's structure;high-level clones;modified PDGs;open source projects;software systems;three-phase PDG;three-phase code clone detector;Cloning;Handheld computers;Merging;Semantics;Software;Syntactics;Tools;PDG modification;characteristic vector filtering;code clone detection;program dependence graph},
  nºtabela   = {97},
  repository = {IEEE},
}

@InProceedings{Toomey2012,
  author     = {W. Toomey},
  title      = {Ctcompare: Code clone detection using hashed token sequences},
  booktitle  = {2012 6th International Workshop on Software Clones (IWSC)},
  year       = {2012},
  pages      = {92-93},
  month      = {June},
  doi        = {10.1109/IWSC.2012.6227881},
  keywords   = {cryptography;source coding;trees (mathematics);code clone detection;ctcompare;hashed token sequences;suffix trees;tokenized source code;Algorithm design and analysis;Australia;Cloning;Databases;Educational institutions;Redundancy;Time measurement;clone detection;code clone;code redundancy;hash function;software},
  nºtabela   = {98},
  repository = {IEEE},
}

@inproceedings{wieringa2006,
  author={R. Wieringa, N. Maiden, N. Mead and C. Rolland},
  title={Requirements engineering paper classification and evaluation criteria: a proposal and a discussion},
  journal={Requirements Eng.},
  pages={102–-107},
  year={2006}
}

@inproceedings{kitchenham2010,
  title={The value of mapping studies-a participant-observer case study},
  author={B.A. Kitchenham, D. Budgen and P. Brereton},
  booktitle={14th International Conference on Evaluation and Assessment in Software Engineering, British Computer Society},
  pages={25--33},
  year={2010}
}

@inproceedings{petersen2008,
  title={Systematic mapping studies in software engineering},
  author={K. Petersen, R. Feldt, S. Mujtaba and M. Mattsson},
  booktitle={12th International Conference on Evaluation and Assessment in Software Engineering},
  pages={1},
  year={2008}
}

@article{laguna2013systematic,
	title={A systematic mapping study on software product line evolution: From legacy system reengineering to product line refactoring},
	author={Laguna, Miguel A and Crespo, Yania},
	journal={Science of Computer Programming},
	volume={78},
	number={8},
	pages={1010--1034},
	year={2013},
	publisher={Elsevier}
}



@InProceedings{Duala-Ekoko2007b,
	author     = {E. Duala-Ekoko and M. P. Robillard},
	title      = {Tracking Code Clones in Evolving Software},
	booktitle  = {29th International Conference on Software Engineering (ICSE'07)},
	year       = {2007},
	pages      = {158-167},
	month      = {May},
	doi        = {10.1109/ICSE.2007.90},
	issn       = {0270-5257},
	keywords   = {software maintenance;source coding;clone detection tool;clone region descriptor;code clone tracking;software development;Cloning;Computer languages;Computer science;Logic programming;Monitoring;Programming profession;Q factor;Robustness;Software systems;Writing},
	repository = {IEEE},
}

@Article{Fordos2016,
	author     = {Fordos, Viktoria and Toth, Melinda},
	title      = {Identifying code clones with refactorerl},
	journal    = {Acta Cybernetica},
	year       = {2016},
	volume     = {22},
	number     = {3},
	pages      = {553 - 571},
	issn       = {0324721X},
	note       = {Clone detection algorithms;Code clone;Identifying code;Maintenance cost;Source codes;Tools and techniques;},
	abstract   = {Code clones, the results of "copy&amp;paste programming", have a negative impact on software maintenance. Therefore several tools and techniques have been developed to identify them in the source code. Most of them concentrate on imperative, well known languages, while in this paper, we give an AST/metric based clone detection algorithm for the functional programming language Erlang. We propose a standalone solution that does not overload users with results that are insignificant from the point of view of the user. We emphasise that the maintenance costs can be decreased by using our solution, because the programmers need to deal only with important issues.<br/>},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	key        = {Functional programming},
	keywords   = {Cloning;Codes (symbols);Computational linguistics;Computer programming;},
	language   = {English},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.14232/actacyb.22.3.2016.1},
}


@inproceedings{kapdan2014structural,
	title={On the structural code clone detection problem: a survey and software metric based approach},
	author={Kapdan, Mustafa and Aktas, Mehmet and Yigit, Melike},
	booktitle={International Conference on Computational Science and Its Applications},
	pages={492--507},
	year={2014},
	organization={Springer}
}

@article{roy2007survey,
	title={A survey on software clone detection research},
	author={Roy, Chanchal Kumar and Cordy, James R},
	journal={Queen’s School of Computing TR},
	volume={541},
	number={115},
	pages={64--68},
	year={2007}
}

@inproceedings{gautam2016various,
	title={Various code clone detection techniques and tools: a comprehensive survey},
	author={Gautam, Pratiksha and Saini, Hemraj},
	booktitle={International Conference on Smart Trends for Information Technology and Computer Communications},
	pages={655--667},
	year={2016},
	organization={Springer}
}

@inproceedings{solanki2016comparative,
	title={Comparative study of software clone detection techniques},
	author={Solanki, Kamna and Kumari, Sunayna},
	booktitle={Management and Innovation Technology International Conference (MITicon), 2016},
	pages={MIT--152},
	year={2016},
	organization={IEEE}
} 
@InProceedings{Torres2017,
	author     = {Torres, Jose Jorge Barreto and Junior, Methanias C. R. and De Freitas Farias, Mario Andre},
	title      = {Procedural x OO: A corporative experiment on source code clone mining},
	year       = {2017},
	volume     = {2},
	pages      = {395 - 402},
	address    = {Porto, Portugal},
	note       = {Closed source;Code clone detection;Experimental software engineering;Mining software repositories;Object oriented software;Private educations;Proprietary software;Similarity threshold;},
	abstract   = {Open Source Software (OSS) repositories are widely used to execute studies around code clone detection, mostly inside the public scenario. However, corporative code Repositories have their content restricted and protected from access by developers who are not part of the company. Besides, there are a lot of questions regarding paradigm efficiency and its relation to clone manifestation. This article presents an experiment performed on systems developed in a large private education company, to observe and compare the incidence of cloned code between Object Oriented and Procedural proprietary software, using an exact similarity threshold. The results indicate that Object Oriented Software wondrously showed higher cloned lines of code incidence and a similar use of abstraction (clone sets) for functions or methods. &copy;2017 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	journal    = {ICEIS 2017 - Proceedings of the 19th International Conference on Enterprise Information Systems},
	key        = {Object oriented programming},
	keywords   = {Cloning;Codes (symbols);Computer software;Information systems;Open source software;Open systems;Software engineering;},
	language   = {English},
	repository = {EI COMPENDEX},
}

@Article{jang2009bitshred,
	author  = {Jang, Jiyong and Brumley, David},
	title   = {Bitshred: Fast, scalable code reuse detection in binary code (cmu-cylab-10-006)},
	journal = {CyLab},
	year    = {2009},
	pages   = {28},
}

@InProceedings{Rattan2016,
	author     = {Rattan, Dhavleesh and Kaur, Jagdeep},
	title      = {Systematic Mapping Study of Metrics Based Clone Detection Techniques},
	booktitle  = {Proceedings of the International Conference on Advances in Information Communication Technology \& Computing},
	year       = {2016},
	series     = {AICTC '16},
	pages      = {76:1--76:7},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {2979855},
	articleno  = {76},
	doi        = {10.1145/2979779.2979855},
	isbn       = {978-1-4503-4213-1},
	keywords   = {Code clone, software metrics, systematic mapping, systematic review},
	location   = {Bikaner, India},
	numpages   = {7},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/2979779.2979855},
}


%%%%



@Article{Nishi2018,
	author     = {Manziba Akanda Nishi and Kostadin Damevski},
	title      = {Scalable code clone detection and search based on adaptive prefix filtering},
	journal    = {Journal of Systems and Software},
	year       = {2018},
	volume     = {137},
	pages      = {130 - 142},
	issn       = {0164-1212},
	doi        = {https://doi.org/10.1016/j.jss.2017.11.039},
	keywords   = {Code clone detection, Prefix filtering, Software maintenance},
	nºtabela   = { 24},
	repository = {SCIENCE},
	url        = {https://www.sciencedirect.com/science/article/pii/S0164121217302790},
}

@InProceedings{Vishwachi2017,
	author     = {Vishwachi and Gupta, Sonam},
	title      = {Detection of near-miss clones using metrics and abstract syntax trees},
	year       = {2017},
	pages      = {230 - 234},
	address    = {Coimbatore, India},
	note       = {Abstract Syntax Trees;Code clone;Code sections;Code segments;Metrics;Near-misses;},
	abstract   = {Reusing code segments via copying and pasting is quite common practice in the process of software development. The pasted segment may include minor differences from the original segment. As a result of copying and pasting, several code sections may be similar to each other. Such sections are referred to as code clones. This paper presents an approach for detection of these code clones. The reason for detecting them is that they generate problem at the time of software maintenance. The method adopted in this paper involves the use of metrics and Abstract Syntax Trees. &copy; 2017 IEEE.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	journal    = {Proceedings of the International Conference on Inventive Communication and Computational Technologies, ICICCT 2017},
	key        = {Cloning},
	keywords   = {Codes (symbols);Software design;Syntactics;Trees (mathematics);},
	language   = {English},
	nºtabela   = {01},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1109/ICICCT.2017.7975193},
}

@InProceedings{Sheneamer2016,
	author     = {A. Sheneamer and J. Kalita},
	title      = {Semantic Clone Detection Using Machine Learning},
	booktitle  = {2016 15th IEEE International Conference on Machine Learning and Applications (ICMLA)},
	year       = {2016},
	pages      = {1024-1028},
	month      = {Dec},
	doi        = {10.1109/ICMLA.2016.0185},
	keywords   = {learning (artificial intelligence);program debugging;software maintenance;source code (software);tree data structures;AST;IJaDataset2.0;PDG;abstract syntax trees;bug propagation;classification algorithms;code fragment pair;machine learning framework;program dependency graphs;semantic code clone detection;software maintenance;source code fragments;syntactic clones;type-3 clone detection;type-4 clone detection;Cloning;Control systems;Feature extraction;Machine learning algorithms;Measurement;Semantics;Syntactics;Abstract syntax trees (AST);Classifier algorithms;Code clones;Program dependence graphs (PDG);Software clones},
	nºtabela   = {02},
	repository = {IEEE},
}

@InProceedings{Casazza2001,
	author     = {G. Casazza and G. Antoniol and U. Villano and E. Merlo and M. Di Penta},
	title      = {Identifying clones in the Linux kernel},
	booktitle  = {Proceedings First IEEE International Workshop on Source Code Analysis and Manipulation},
	year       = {2001},
	pages      = {90-97},
	doi        = {10.1109/SCAM.2001.972670},
	keywords   = {Unix;operating system kernels;software metrics;software portability;Linux kernel;clone identification;clone percentage;cloned code;code analysis;duplicated code;hardware-dependent code;large multi-platform software systems;metric-based approach;multi-platform source code;single platform;Assembly;Cloning;Computer industry;Hardware;Kernel;Linux;Operating systems;Software metrics;Software systems;Writing},
	nºtabela   = {03},
	repository = {IEEE},
}

@InProceedings{Vislavski2018,
	author     = {T. Vislavski and G. Rakić and N. Cardozo and Z. Budimac},
	title      = {LICCA: A tool for cross-language clone detection},
	booktitle  = {2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
	year       = {2018},
	pages      = {512-516},
	month      = {March},
	doi        = {10.1109/SANER.2018.8330250},
	keywords   = {C language;Java;program diagnostics;software maintenance;software quality;software tools;C language;Java language;JavaScript;LICCA;Modula-2;Scheme;code clones;code deterioration;cross-language clone detection;duplicate code fragments;programming language;software quality;software system development;software system maintenance;system bugs;Cloning;Java;Maintenance engineering;Semantics;Software systems;Syntactics;Tools},
	nºtabela   = {04},
	repository = {IEEE},
}

@InProceedings{Lucca2002,
	author     = {G. A. Di Lucca and M. Di Penta and A. R. Fasolino},
	title      = {An approach to identify duplicated web pages},
	booktitle  = {Proceedings 26th Annual International Computer Software and Applications},
	year       = {2002},
	pages      = {481-486},
	doi        = {10.1109/CMPSAC.2002.1045051},
	issn       = {0730-3157},
	keywords   = {Internet;electronic commerce;information resources;software metrics;clone detection;duplication;software metrics;source code clones;web engineering;web page metrics;web site analysis;Application software;Application specific processors;Cloning;HTML;Plagiarism;Software metrics;Software testing;Time to market;US Department of Transportation;Web pages},
	nºtabela   = {05},
	repository = {IEEE},
}

@InProceedings{Lee2005,
	author     = {Lee, Seunghak and Jeong, Iryoung},
	title      = {SDD: High Performance Code Clone Detection System for Large Scale Source Code},
	booktitle  = {Companion to the 20th Annual ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications},
	year       = {2005},
	series     = {OOPSLA '05},
	pages      = {140--141},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {1094903},
	doi        = {10.1145/1094855.1094903},
	isbn       = {1-59593-193-7},
	keywords   = {code clone, duplicated code, search index, system maintenance},
	location   = {San Diego, CA, USA},
	numpages   = {2},
	nºtabela   = {06},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/1094855.1094903},
}

@InProceedings{Ueda2002,
	author     = {Ueda, Y. and Kamiya, T. and Kusumoto, S. and Inoue, K.},
	title      = {On detection of gapped code clones using gap locations},
	year       = {2002},
	volume     = {2002-January},
	pages      = {327 - 336},
	address    = {Gold Coast, QLD, Australia},
	note       = {Code clone;Code clone detection;Copy-and-paste;Experimental evaluation;Maintenance supports;One-factor;Source files;},
	abstract   = {It is generally accepted that a code clone is one factor making software maintenance difficult. A code clone is a code portion in source files that is identical or similar to another. Clones are introduced because of various reasons such as reusing code by 'copy-and-paste' and so on. Since developers usually modify the copied-and-pasted code portions, there are gaps between them and the original code portion. We call such code portions including gaps gapped code clones. Several code clone detection methods, which consider such gaps, have been proposed. However, it is costly to detect all gapped code clones. This paper proposes a new method to visualize gapped code clones as if they were actually detected, based on the detection results of conventional code clones. Using the proposed method, the developer can specify target clones efficiently. Moreover, we implement the proposed method in the maintenance support environment and conduct an experimental evaluation. &copy; 2002 IEEE.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	issn       = {15301362},
	journal    = {Proceedings - Asia-Pacific Software Engineering Conference, APSEC},
	key        = {Codes (symbols)},
	keywords   = {Cloning;Copying;Software engineering;},
	language   = {English},
	nºtabela   = {07},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1109/APSEC.2002.1183002},
}

@InProceedings{Abdelkader2015,
	author     = {M. Abdelkader and M. Mimoun},
	title      = {Clone detection using time series and dynamic time warping techniques},
	booktitle  = {2015 Third World Conference on Complex Systems (WCCS)},
	year       = {2015},
	pages      = {1-6},
	month      = {Nov},
	doi        = {10.1109/ICoCS.2015.7483299},
	keywords   = {data mining;software engineering;time series;DTW similarity value;clone detection problem;data mining;data query;dynamic time warping techniques;time series data;Cloning;Heuristic algorithms;Measurement;Software algorithms;Software systems;Time series analysis;Clone Detection;Dynamic Time Warping;Time series},
	nºtabela   = {08},
	repository = {IEEE},
}

@InProceedings{Dang2012,
	author     = {Dang, Yingnong and Zhang, Dongmei and Ge, Song and Chu, Chengyun and Qiu, Yingjun and Xie, Tao},
	title      = {XIAO: Tuning Code Clones at Hands of Engineers in Practice},
	booktitle  = {Proceedings of the 28th Annual Computer Security Applications Conference},
	year       = {2012},
	series     = {ACSAC '12},
	pages      = {369--378},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {2421004},
	doi        = {10.1145/2420950.2421004},
	isbn       = {978-1-4503-1312-4},
	keywords   = {code clone, code duplication, code-clone detection, code-clone search, duplicated security vulnerability},
	location   = {Orlando, Florida, USA},
	numpages   = {10},
	nºtabela   = {09},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/2420950.2421004},
}

@InProceedings{Roopam2017,
	author     = {Roopam and G. Singh},
	title      = {To enhance the code clone detection algorithm by using hybrid approach for detection of code clones},
	booktitle  = {2017 International Conference on Intelligent Computing and Control Systems (ICICCS)},
	year       = {2017},
	pages      = {192-198},
	month      = {June},
	doi        = {10.1109/ICCONS.2017.8250708},
	keywords   = {program debugging;software maintenance;software metrics;software reusability;HYBRID approach;code clone detection algorithm;duplicate code;hybrid approach;source code;Algorithm design and analysis;Cloning;Computer bugs;Control systems;Measurement;Software;Syntactics;Code clone;parsing;plagiarism;refactoring;reuse;semantic;similarity;syntactic},
	nºtabela   = {10},
	repository = {IEEE},
}

@InProceedings{Jiang2007a,
	author     = {L. Jiang and G. Misherghi and Z. Su and S. Glondu},
	title      = {DECKARD: Scalable and Accurate Tree-Based Detection of Code Clones},
	booktitle  = {29th International Conference on Software Engineering (ICSE'07)},
	year       = {2007},
	pages      = {96-105},
	month      = {May},
	doi        = {10.1109/ICSE.2007.30},
	issn       = {0270-5257},
	keywords   = {software engineering;trees (mathematics);Deckard;Euclidean distance metric;code clones;software engineering;source code;subtrees;tree representations;tree-based detection;Application software;Cloning;Clustering algorithms;Euclidean distance;Fingerprint recognition;Java;Linux;Programming profession;Robustness;Software engineering},
	nºtabela   = {11},
	repository = {IEEE},
}

@InProceedings{Krutz2014,
	author     = {Krutz, Daniel E. and Le, Wei},
	title      = {A Code clone oracle},
	year       = {2014},
	pages      = {388 - 391},
	address    = {Hyderabad, India},
	note       = {Code clone detection;Code search;Equivalent codes;High confidence;Manual inspection;Multiple codes;Open source projects;PostgreSQL;},
	abstract   = {Code clones are functionally equivalent code segments. Detecting code clones is important for determining bugs, fixes and software reuse. Code clone detection is also essential for developing fast and precise code search algorithms. However, the challenge of such research is to evaluate that the clones detected are indeed functionally equivalent, considering the majority of clones are not textual or even syntactically identical. The goal of this work is to generate a set of method level code clones with a high confidence to help to evaluate future code clone detection and code search tools to evaluate their techniques. We selected three open source programs, Apache, Python and PostgreSQL, and randomly sampled a total of 1536 function pairs. To confirm whether or not these function pairs indicate a clone and what types of clones they belong to, we recruited three experts who have experience in code clone research and four students who have experience in programming for manual inspection. For confidence of the data, the experts consulted multiple code clone detection tools to make the consensus. To assist manual inspection, we built a tool to automatically load function pairs of interest and record the manual inspection results. We found that none of the 66 pairs are textual identical type-1 clones, and 9 pairs are type-4 clones. Our data is available at: http://phd.gccis.rit.edu/weile/data/cloneoracle/. Copyright 2014 ACM.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	journal    = {11th Working Conference on Mining Software Repositories, MSR 2014 - Proceedings},
	key        = {Cloning},
	keywords   = {Codes (symbols);Computer programming;Computer software;Computer software reusability;Function evaluation;Inspection;Open source software;Program debugging;Software engineering;},
	language   = {English},
	nºtabela   = {12},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1145/2597073.2597127},
}

@InProceedings{Lin2014,
	author     = {Lin, Yun and Xing, Zhenchang and Xue, Yinxing and Liu, Yang and Peng, Xin and Sun, Jun and Zhao, Wenyun},
	title      = {Detecting Differences Across Multiple Instances of Code Clones},
	booktitle  = {Proceedings of the 36th International Conference on Software Engineering},
	year       = {2014},
	series     = {ICSE 2014},
	pages      = {164--174},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {2568298},
	doi        = {10.1145/2568225.2568298},
	isbn       = {978-1-4503-2756-5},
	keywords   = {Code clone, Human study, Program differencing},
	location   = {Hyderabad, India},
	numpages   = {11},
	nºtabela   = {13},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/2568225.2568298},
}

@Article{Kamiya2002,
	author     = {T. Kamiya and S. Kusumoto and K. Inoue},
	title      = {CCFinder: a multilinguistic token-based code clone detection system for large scale source code},
	journal    = {IEEE Transactions on Software Engineering},
	year       = {2002},
	volume     = {28},
	number     = {7},
	pages      = {654-670},
	month      = {Jul},
	issn       = {0098-5589},
	doi        = {10.1109/TSE.2002.1019480},
	keywords   = {computer aided software engineering;high level languages;large-scale systems;optimising compilers;software maintenance;software metrics;software tools;C language;C++ language;CASE tool;CCFinder;COBOL;FreeBSD;JDK;Java;Java Development Kit;Linux;NetBSD;case studies;duplicated code;input source text transformation;large-scale source code;multi-linguistic token-based code clone detection system;optimization techniques;software maintainability;software metrics;system characteristics identification;token-by-token comparison;Cloning;Computer aided software engineering;Java;Large-scale systems;Linux;Maintenance engineering;Programming profession;Software maintenance;Software systems;Software tools},
	nºtabela   = {14},
	repository = {IEEE},
}

@InProceedings{Joshi2015,
	author     = {Joshi, Bikash and Budhathoki, Puskar and Woon, Wei Lee and Svetinovic, Davor},
	title      = {Software clone detection using clustering approach},
	year       = {2015},
	volume     = {9490},
	pages      = {520 - 527},
	address    = {Istanbul, Turkey},
	note       = {Clone detection;Clustering approach;Complexity reduction;High-precision;Software clone detection;Software metrics;Software Quality;Software systems;},
	abstract   = {Code clones are highly similar or identical code segments. Identification of clones helps improve software quality through managed evolution, refactoring, complexity reduction, etc. In this study, we investigate Type 1 and Type 2 function clones using a data mining technique. First, we create a dataset by collecting metrics for all functions in a software system. Second, we apply DBSCAN clustering algorithm on the dataset so that each cluster can be analysed to detect Type 1 and Type 2 function clones. We evaluate our approach by analyzing an open source software Bitmessage. We calculate the precision value to show the effectiveness of our approach in detecting function clones. We show that our approach for functional clone detection is effective with high precision value and number of function clones detected. &copy; Springer International Publishing Switzerland 2015.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	issn       = {03029743},
	journal    = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	key        = {Cloning},
	keywords   = {Clustering algorithms;Computer software;Computer software selection and evaluation;Data mining;Information science;Open source software;Open systems;Software engineering;},
	language   = {English},
	nºtabela   = {15},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1007/978-3-319-26535-3_59},
}

@InProceedings{Sutton2005,
	author     = {Sutton, Andrew and Kagdi, Huzefa and Maletic, Jonathan I. and Volkert, L. Gwenn},
	title      = {Hybridizing Evolutionary Algorithms and Clustering Algorithms to Find Source-code Clones},
	booktitle  = {Proceedings of the 7th Annual Conference on Genetic and Evolutionary Computation},
	year       = {2005},
	series     = {GECCO '05},
	pages      = {1079--1080},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {1068191},
	doi        = {10.1145/1068009.1068191},
	isbn       = {1-59593-010-8},
	keywords   = {clone detection, evolutionary algorithms, software engineering},
	location   = {Washington DC, USA},
	numpages   = {2},
	nºtabela   = {16},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/1068009.1068191},
}

@InProceedings{Nguyen2009,
	author     = {Nguyen, Tung Thanh and Nguyen, Hoan Anh and Al-Kofahi, Jafar M. and Pham, Nam H. and Nguyen, Tien N.},
	title      = {Scalable and incremental clone detection for evolving software},
	year       = {2009},
	pages      = {491 - 494},
	address    = {Edmonton, AB, Canada},
	note       = {Abstract Syntax Trees;Characteristic vectors;Clone detection;Clone management;Empirical evaluations;Large-scale software projects;Software developer;Structural feature;},
	abstract   = {Code clone management has been shown to have several benefits for software developers. When source code evolves, clone management requires a mechanism to efficiently and incrementally detect code clones in the new revision. This paper introduces an incremental clone detection tool, called ClemanX. Our tool represents code fragments as subtrees of Abstract Syntax Trees (ASTs), measures their similarity levels based on their characteristic vectors of structural features, and solves the task of incrementally detecting similar code as an incremental distance-based clustering problem. Our empirical evaluation on large-scale software projects shows the usefulness and good performance of ClemanX.<br/>},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	journal    = {IEEE International Conference on Software Maintenance, ICSM},
	key        = {Computer software maintenance},
	keywords   = {Cloning;Codes (symbols);Trees (mathematics);},
	language   = {English},
	nºtabela   = {17},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1109/ICSM.2009.5306283},
}

@InProceedings{Yuan2011,
	author     = {Y. Yuan and Y. Guo},
	title      = {CMCD: Count Matrix Based Code Clone Detection},
	booktitle  = {2011 18th Asia-Pacific Software Engineering Conference},
	year       = {2011},
	pages      = {250-257},
	month      = {Dec},
	doi        = {10.1109/APSEC.2011.13},
	issn       = {1530-1362},
	keywords   = {matrix algebra;program diagnostics;software maintenance;CMCD;clone cluster;code clone detection;count matrix;Bipartite graph;Cloning;Layout;Programming;Switches;Syntactics;Vectors;Code clone detection;bipartite graph matching;count matrix},
	nºtabela   = {18},
	repository = {IEEE},
}

@InProceedings{Al-omari2016,
	author     = {Al-omari, Farouq and Roy, Chanchal K.},
	title      = {Is Code Cloning in Games Really Different?},
	booktitle  = {Proceedings of the 31st Annual ACM Symposium on Applied Computing},
	year       = {2016},
	series     = {SAC '16},
	pages      = {1512--1519},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {2851792},
	doi        = {10.1145/2851613.2851792},
	isbn       = {978-1-4503-3739-7},
	keywords   = {game clones, open source games, software clones},
	location   = {Pisa, Italy},
	numpages   = {8},
	nºtabela   = {19},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/2851613.2851792},
}

@InProceedings{Schugerl2011,
	author     = {Schugerl, Philipp},
	title      = {Scalable Clone Detection Using Description Logic},
	booktitle  = {Proceedings of the 5th International Workshop on Software Clones},
	year       = {2011},
	series     = {IWSC '11},
	pages      = {47--53},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {1985413},
	doi        = {10.1145/1985404.1985413},
	isbn       = {978-1-4503-0588-4},
	keywords   = {code clone detection, semantic-web.},
	location   = {Waikiki, Honolulu, HI, USA},
	numpages   = {7},
	nºtabela   = {20},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/1985404.1985413},
}

@InProceedings{Cordy2011,
	author     = {J. R. Cordy and C. K. Roy},
	title      = {DebCheck: Efficient Checking for Open Source Code Clones in Software Systems},
	booktitle  = {2011 IEEE 19th International Conference on Program Comprehension},
	year       = {2011},
	pages      = {217-218},
	month      = {June},
	doi        = {10.1109/ICPC.2011.27},
	issn       = {1092-8138},
	keywords   = {program diagnostics;public domain software;DebCheck;Debian source distribution;NiCad clone detector;open source code clones;open source software;software systems;Cloning;Communities;DVD;Detectors;Law;Licenses;Software systems;GPL;clone detection;licensing;open source},
	nºtabela   = {21},
	repository = {IEEE},
}

@Article{Bian2013,
	author     = {Yixin Bian and Gunes Koru and Xiaohong Su and Peijun Ma},
	title      = {SPAPE: A semantic-preserving amorphous procedure extraction method for near-miss clones},
	journal    = {Journal of Systems and Software},
	year       = {2013},
	volume     = {86},
	number     = {8},
	pages      = {2077 - 2093},
	issn       = {0164-1212},
	doi        = {https://doi.org/10.1016/j.jss.2013.03.061},
	keywords   = {Near-miss clones, Amorphous procedure extraction, Refactoring},
	nºtabela   = {22},
	repository = {SCIENCE},
	url        = {https://www.sciencedirect.com/science/article/pii/S0164121213000733},
}

@Article{Evans2009,
	author     = {Evans, William S. and Fraser, Christopher W. and Ma, Fei},
	title      = {Clone detection via structural abstraction},
	journal    = {Software Quality Journal},
	year       = {2009},
	volume     = {17},
	number     = {4},
	pages      = {309 - 330},
	issn       = {09639314},
	note       = {Abstract Syntax Trees;Clone detection;Intermediate representations;Procedural abstraction;Refactorings;Subtrees;},
	abstract   = {This paper describes the design, implementation, and application of a new algorithm to detect cloned code. It operates on the abstract syntax trees formed by many compilers as an intermediate representation. It extends prior work by identifying clones even when arbitrary subtrees have been changed. These subtrees may represent structural rather than simply lexical code differences. In several hundred thousand lines of Java and C# code, 20-50% of the clones that we find involve these structural changes, which are not accounted for by previous methods. Our method also identifies cloning in declarations, so it is somewhat more general than conventional procedural abstraction. &copy; 2009 Springer Science+Business Media, LLC.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	key        = {Cloning},
	keywords   = {Abstracting;},
	language   = {English},
	nºtabela   = {23},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1007/s11219-009-9074-y},
}

@InProceedings{Svajlenko2017,
	author     = {Svajlenko, Jeffrey and Roy, Chanchal K.},
	title      = {CloneWorks: A Fast and Flexible Large-scale Near-miss Clone Detection Tool},
	booktitle  = {Proceedings of the 39th International Conference on Software Engineering Companion},
	year       = {2017},
	series     = {ICSE-C '17},
	pages      = {177--179},
	address    = {Piscataway, NJ, USA},
	publisher  = {IEEE Press},
	acmid      = {3098404},
	doi        = {10.1109/ICSE-C.2017.78},
	isbn       = {978-1-5386-1589-8},
	keywords   = {clone detection, code clone, fast, flexible, scalable},
	location   = {Buenos Aires, Argentina},
	numpages   = {3},
	nºtabela   = {25},
	repository = {ACM},
	url        = {https://doi.org/10.1109/ICSE-C.2017.78},
}

@InProceedings{Krutz2015,
	author     = {Krutz, Daniel E. and Malachowsky, Samuel A. and Shihab, Emad},
	title      = {Examining the Effectiveness of Using Concolic Analysis to Detect Code Clones},
	booktitle  = {Proceedings of the 30th Annual ACM Symposium on Applied Computing},
	year       = {2015},
	series     = {SAC '15},
	pages      = {1610--1615},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {2695929},
	doi        = {10.1145/2695664.2695929},
	isbn       = {978-1-4503-3196-8},
	keywords   = {code clones, concolic analysis, software engineering},
	location   = {Salamanca, Spain},
	numpages   = {6},
	nºtabela   = {26},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/2695664.2695929},
}

@InProceedings{Dang2011,
	author     = {Dang, Yingnong and Ge, Song and Huang, Ray and Zhang, Dongmei},
	title      = {Code Clone Detection Experience at Microsoft},
	booktitle  = {Proceedings of the 5th International Workshop on Software Clones},
	year       = {2011},
	series     = {IWSC '11},
	pages      = {63--64},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {1985417},
	doi        = {10.1145/1985404.1985417},
	isbn       = {978-1-4503-0588-4},
	keywords   = {clone detection, experience},
	location   = {Waikiki, Honolulu, HI, USA},
	numpages   = {2},
	nºtabela   = {27},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/1985404.1985417},
}

@InProceedings{Lee2010,
	author     = {Lee, Mu-Woong and Roh, Jong-Won and Hwang, Seung-won and Kim, Sunghun},
	title      = {Instant Code Clone Search},
	booktitle  = {Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering},
	year       = {2010},
	series     = {FSE '10},
	pages      = {167--176},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {1882317},
	doi        = {10.1145/1882291.1882317},
	isbn       = {978-1-60558-791-2},
	keywords   = {clone detection, code search},
	location   = {Santa Fe, New Mexico, USA},
	numpages   = {10},
	nºtabela   = {28},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/1882291.1882317},
}

@InProceedings{Svajlenko2017a,
	author     = {Svajlenko, Jeffrey and Roy, Chanchal K.},
	title      = {Fast and Flexible Large-scale Clone Detection with CloneWorks},
	booktitle  = {Proceedings of the 39th International Conference on Software Engineering Companion},
	year       = {2017},
	series     = {ICSE-C '17},
	pages      = {27--30},
	address    = {Piscataway, NJ, USA},
	publisher  = {IEEE Press},
	acmid      = {3098354},
	doi        = {10.1109/ICSE-C.2017.3},
	isbn       = {978-1-5386-1589-8},
	keywords   = {clone detection, code clone, fast, flexible, scalable},
	location   = {Buenos Aires, Argentina},
	numpages   = {4},
	nºtabela   = {29},
	repository = {ACM},
	url        = {https://doi.org/10.1109/ICSE-C.2017.3},
}

@InProceedings{Lillack2014,
	author     = {Lillack, Max and Bucholdt, Christian and Schilling, Daniela},
	title      = {Detection of Code Clones in Software Generators},
	booktitle  = {Proceedings of the 6th International Workshop on Feature-Oriented Software Development},
	year       = {2014},
	series     = {FOSD '14},
	pages      = {37--44},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {2662116},
	doi        = {10.1145/2660190.2662116},
	isbn       = {978-1-4503-2980-4},
	keywords   = {code clones, feature-oriented refactoring, macros, software generators},
	location   = {V\&auml;ster\&aring;s, Sweden},
	numpages   = {8},
	nºtabela   = {30},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/2660190.2662116},
}

@InProceedings{Tairas2006,
	author     = {Tairas, Robert and Gray, Jeff},
	title      = {Phoenix-based Clone Detection Using Suffix Trees},
	booktitle  = {Proceedings of the 44th Annual Southeast Regional Conference},
	year       = {2006},
	series     = {ACM-SE 44},
	pages      = {679--684},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {1185597},
	doi        = {10.1145/1185448.1185597},
	isbn       = {1-59593-315-8},
	keywords   = {clone detection, code clones, software analysis, suffix trees},
	location   = {Melbourne, Florida},
	numpages   = {6},
	nºtabela   = {31},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/1185448.1185597},
}

@InProceedings{Yuan2012,
	author     = {Yuan, Yang},
	title      = {A Scalable and Accurate Approach Based on Count Matrix for Detecting Code Clones},
	booktitle  = {Proceedings of the 11th Annual International Conference on Aspect-oriented Software Development Companion},
	year       = {2012},
	series     = {AOSD Companion '12},
	pages      = {21--22},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {2162126},
	doi        = {10.1145/2162110.2162126},
	isbn       = {978-1-4503-1222-6},
	keywords   = {code clone, count matrix, token based},
	location   = {Potsdam, Germany},
	numpages   = {2},
	nºtabela   = {32},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/2162110.2162126},
}

@InProceedings{Nguyen2009b,
	author     = {T. T. Nguyen and H. A. Nguyen and N. H. Pham and J. M. Al-Kofahi and T. N. Nguyen},
	title      = {ClemanX: Incremental clone detection tool for evolving software},
	booktitle  = {2009 31st International Conference on Software Engineering - Companion Volume},
	year       = {2009},
	pages      = {437-438},
	month      = {May},
	doi        = {10.1109/ICSE-COMPANION.2009.5071050},
	keywords   = {program diagnostics;software maintenance;ClemanX incremental clone detection tool;code clone management;real-world software project;software evolution analysis;Character generation;Cloning;Feature extraction;Project management;Software tools},
	nºtabela   = {33},
	repository = {IEEE},
}

@InProceedings{Lee2009,
	author     = {Lee, Hyo-Sub and Doh, Kyung-Goo},
	title      = {Tree-pattern-based Duplicate Code Detection},
	booktitle  = {Proceedings of the ACM First International Workshop on Data-intensive Software Management and Mining},
	year       = {2009},
	series     = {DSMM '09},
	pages      = {7--12},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {1651312},
	doi        = {10.1145/1651309.1651312},
	isbn       = {978-1-60558-810-0},
	keywords   = {clone detection, reverse engineering, software maintenance, tree-pattern},
	location   = {Hong Kong, China},
	numpages   = {6},
	nºtabela   = {34},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/1651309.1651312},
}

@InProceedings{Nguyen2009a,
	author     = {T. T. Nguyen and H. A. Nguyen and N. H. Pham and J. M. Al-Kofahi and T. N. Nguyen},
	title      = {Clone-Aware Configuration Management},
	booktitle  = {2009 IEEE/ACM International Conference on Automated Software Engineering},
	year       = {2009},
	pages      = {123-134},
	month      = {Nov},
	doi        = {10.1109/ASE.2009.90},
	issn       = {1938-4300},
	keywords   = {configuration management;software management;AST;Clever;SCM system;abstract syntax trees;clone change management;clone consistency validating;clone detection;clone management support;clone merging;clone synchronizing;clone-aware software configuration management;code clones;real-world programs;tree editing scripts;Algorithm design and analysis;Change detection algorithms;Cloning;Collaboration;Collaborative software;Conference management;Engineering management;Merging;Software engineering;Software systems;clone editing consistency;clone management;clone synchronization;clone-aware;tree edit},
	nºtabela   = {35},
	repository = {IEEE},
}

@InProceedings{Su2016,
	author     = {Su, Fang-Hsiang and Bell, Jonathan and Harvey, Kenneth and Sethumadhavan, Simha and Kaiser, Gail and Jebara, Tony},
	title      = {Code Relatives: Detecting Similarly Behaving Software},
	booktitle  = {Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
	year       = {2016},
	series     = {FSE 2016},
	pages      = {702--714},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {2950321},
	doi        = {10.1145/2950290.2950321},
	isbn       = {978-1-4503-4218-6},
	keywords   = {Code relatives, code clones, link analysis, runtime behavior, subgraph matching},
	location   = {Seattle, WA, USA},
	numpages   = {13},
	nºtabela   = {36},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/2950290.2950321},
}

@InProceedings{Matsushita2017,
	author     = {Matsushita, Tsubasa and Sasano, Isao},
	title      = {Detecting Code Clones with Gaps by Function Applications},
	booktitle  = {Proceedings of the 2017 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation},
	year       = {2017},
	series     = {PEPM 2017},
	pages      = {12--22},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {3018892},
	doi        = {10.1145/3018882.3018892},
	isbn       = {978-1-4503-4721-1},
	keywords   = {abstract syntax tree, code clone, function application, gap},
	location   = {Paris, France},
	numpages   = {11},
	nºtabela   = {37},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/3018882.3018892},
}

@InProceedings{Semura2017,
	author     = {Y. Semura and N. Yoshida and E. Choi and K. Inoue},
	title      = {CCFinderSW: Clone Detection Tool with Flexible Multilingual Tokenization},
	booktitle  = {2017 24th Asia-Pacific Software Engineering Conference (APSEC)},
	year       = {2017},
	pages      = {654-659},
	month      = {Dec},
	doi        = {10.1109/APSEC.2017.80},
	keywords   = {programming languages;software maintenance;CCFinderSW tool;addition language;clone detection tool;code clones;extension mechanism;industry/university collaboration;multilingual tokenization;programming languages;Cloning;Computer bugs;Indexes;Java;Programming;Tools},
	nºtabela   = {38},
	repository = {IEEE},
}

@InProceedings{White2016,
	author     = {White, Martin and Tufano, Michele and Vendome, Christopher and Poshyvanyk, Denys},
	title      = {Deep Learning Code Fragments for Code Clone Detection},
	booktitle  = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
	year       = {2016},
	series     = {ASE 2016},
	pages      = {87--98},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {2970326},
	doi        = {10.1145/2970276.2970326},
	isbn       = {978-1-4503-3845-5},
	keywords   = {abstract syntax trees, code clone detection, deep learning, language models, machine learning, neural networks},
	location   = {Singapore, Singapore},
	numpages   = {12},
	nºtabela   = {39},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/2970276.2970326},
}

@InProceedings{Chang2006,
	author     = {Chang, Hung-Fu and Mockus, Audris},
	title      = {Constructing Universal Version History},
	booktitle  = {Proceedings of the 2006 International Workshop on Mining Software Repositories},
	year       = {2006},
	series     = {MSR '06},
	pages      = {76--79},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {1138002},
	doi        = {10.1145/1137983.1138002},
	isbn       = {1-59593-397-2},
	keywords   = {change history, cloning, code authorship, code copying, version control},
	location   = {Shanghai, China},
	numpages   = {4},
	nºtabela   = {40},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/1137983.1138002},
}

@InProceedings{Basit2007,
	author     = {Basit, Hamid Abdul and Jarzabek, Stan},
	title      = {Efficient Token Based Clone Detection with Flexible Tokenization},
	booktitle  = {Proceedings of the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering},
	year       = {2007},
	series     = {ESEC-FSE '07},
	pages      = {513--516},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {1287698},
	doi        = {10.1145/1287624.1287698},
	isbn       = {978-1-59593-811-4},
	keywords   = {clone detection, reverse engineering, software maintenance, token-based clone detection},
	location   = {Dubrovnik, Croatia},
	numpages   = {4},
	nºtabela   = {41},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/1287624.1287698},
}

@InProceedings{Jablonski2007a,
	author     = {Jablonski, Patricia and Hou, Daqing},
	title      = {CReN: A Tool for Tracking Copy-and-paste Code Clones and Renaming Identifiers Consistently in the IDE},
	booktitle  = {Proceedings of the 2007 OOPSLA Workshop on Eclipse Technology eXchange},
	year       = {2007},
	series     = {eclipse '07},
	pages      = {16--20},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {1328283},
	doi        = {10.1145/1328279.1328283},
	isbn       = {978-1-60558-015-9},
	keywords   = {Eclipse integrated development environment, Java, abstract syntax tree, code clone, consistent renaming, copy-and-paste programming, error detection, intent inference},
	location   = {Montreal, Quebec, Canada},
	numpages   = {5},
	nºtabela   = {42},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/1328279.1328283},
}

@InProceedings{Chen2014a,
	author     = {Chen, Kai and Liu, Peng and Zhang, Yingjun},
	title      = {Achieving Accuracy and Scalability Simultaneously in Detecting Application Clones on Android Markets},
	booktitle  = {Proceedings of the 36th International Conference on Software Engineering},
	year       = {2014},
	series     = {ICSE 2014},
	pages      = {175--186},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {2568286},
	doi        = {10.1145/2568225.2568286},
	isbn       = {978-1-4503-2756-5},
	keywords   = {Android, Software analysis, centroid, clone detection},
	location   = {Hyderabad, India},
	numpages   = {12},
	nºtabela   = {43},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/2568225.2568286},
}

@InProceedings{Funaro2010,
	author     = {Funaro, Marco and Braga, Daniele and Campi, Alessandro and Ghezzi, Carlo},
	title      = {A Hybrid Approach (Syntactic and Textual) to Clone Detection},
	booktitle  = {Proceedings of the 4th International Workshop on Software Clones},
	year       = {2010},
	series     = {IWSC '10},
	pages      = {79--80},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {1808914},
	doi        = {10.1145/1808901.1808914},
	isbn       = {978-1-60558-980-0},
	keywords   = {abstract syntax tree, clone detection},
	location   = {Cape Town, South Africa},
	numpages   = {2},
	nºtabela   = {44},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/1808901.1808914},
}

@InProceedings{Zibran2012,
	author     = {Zibran, Minhaz F. and Roy, Chanchal K.},
	title      = {IDE-based Real-time Focused Search for Near-miss Clones},
	booktitle  = {Proceedings of the 27th Annual ACM Symposium on Applied Computing},
	year       = {2012},
	series     = {SAC '12},
	pages      = {1235--1242},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {2231970},
	doi        = {10.1145/2245276.2231970},
	isbn       = {978-1-4503-0857-1},
	keywords   = {clone detection, clone search, maintenance, reengineering},
	location   = {Trento, Italy},
	numpages   = {8},
	nºtabela   = {45},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/2245276.2231970},
}

@InProceedings{Li2009,
	author     = {Li, Huiqing and Thompson, Simon},
	title      = {Clone Detection and Removal for Erlang/OTP Within a Refactoring Environment},
	booktitle  = {Proceedings of the 2009 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation},
	year       = {2009},
	series     = {PEPM '09},
	pages      = {169--178},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {1480971},
	doi        = {10.1145/1480945.1480971},
	isbn       = {978-1-60558-327-3},
	keywords   = {duplicated code, erlang, program analysis, program transformation, refactoring, wrangler},
	location   = {Savannah, GA, USA},
	numpages   = {10},
	nºtabela   = {46},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/1480945.1480971},
}

@InProceedings{Cordy2014,
	author     = {Cordy, James R. and Dean, Thomas R. and Synytskyy, Nikita},
	title      = {Practical Language-independent Detection of Near-miss Clones},
	booktitle  = {Proceedings of 24th Annual International Conference on Computer Science and Software Engineering},
	year       = {2014},
	series     = {CASCON '14},
	pages      = {2--2},
	address    = {Riverton, NJ, USA},
	publisher  = {IBM Corp.},
	acmid      = {2735524},
	location   = {Markham, Ontario, Canada},
	numpages   = {1},
	nºtabela   = {47},
	repository = {ACM},
	url        = {http://dl.acm.org/citation.cfm?id=2735522.2735524},
}

@InProceedings{Brown2010,
	author     = {Brown, Christopher and Thompson, Simon},
	title      = {Clone Detection and Elimination for Haskell},
	booktitle  = {Proceedings of the 2010 ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation},
	year       = {2010},
	series     = {PEPM '10},
	pages      = {111--120},
	address    = {New York, NY, USA},
	publisher  = {ACM},
	acmid      = {1706378},
	doi        = {10.1145/1706356.1706378},
	isbn       = {978-1-60558-727-1},
	keywords   = {duplicated code, generalisation, hare, haskell, program analysis, program transformation, refactoring},
	location   = {Madrid, Spain},
	numpages   = {10},
	nºtabela   = {48},
	repository = {ACM},
	url        = {http://doi.acm.org/10.1145/1706356.1706378},
}

@InProceedings{Kim2017,
	author     = {S. Kim and S. Woo and H. Lee and H. Oh},
	title      = {VUDDY: A Scalable Approach for Vulnerable Code Clone Discovery},
	booktitle  = {2017 IEEE Symposium on Security and Privacy (SP)},
	year       = {2017},
	pages      = {595-614},
	month      = {May},
	doi        = {10.1109/SP.2017.62},
	keywords   = {program diagnostics;public domain software;security of data;source code (software);OSS;VUDDY;code clone discovery vulnerability;code clones detection;function-level granularity;length-filtering technique;open source software;scalable approach;security-aware abstraction technique;zero-day vulnerabilities;Androids;Cloning;Kernel;Linux;Scalability;Security;code clone;software vulnerability;vulnerability detection},
	nºtabela   = {49},
	repository = {IEEE},
}

@InProceedings{Zou2017,
	author     = {Zou, Deqing and Qi, Hanchao and Li, Zhen and Wu, Song and Jin, Hai and Sun, Guozhong and Wang, Sujuan and Zhong, Yuyi},
	title      = {SCVD: A new semantics-based approach for cloned vulnerable code detection},
	year       = {2017},
	volume     = {10327 LNCS},
	pages      = {325 - 344},
	address    = {Bonn, Germany},
	note       = {Cloned code;False negative rate;False positive rates;Mapping techniques;Program dependency graphs;Semantic information;Subgraph isomorphism;Vulnerability detection;},
	abstract   = {The behavior of copying existing code to reuse or modify its functionality is very common in the software development. However, when developers clone the existing code, they also clone any vulnerabilities in it. Thus, it seriously affects the security of the system. In this paper, we propose a novel semantics-based approach called SCVD for cloned vulnerable code detection. We use the full path traversal algorithm to transform the Program Dependency Graph (PDG) into a tree structure while preserving all the semantic information carried by the PDG and apply the tree to the cloned vulnerable code detection. We use the identifier name mapping technique to eliminate the impact of identifier name modification. Our key insights are converting the complex graph similarity problem into a simpler tree similarity problem and using the identifier name mapping technique to improve the effectiveness of semantics-based cloned vulnerable code detection. We have developed a practical tool based on our approach and performed a large number of experiments to evaluate the performance from three aspects, including the false positive rate, false negative rate, and time cost. The experiment results show that our approach has a significant improvement on the vulnerability detection effectiveness compared with the existing approaches and has lower time cost than subgraph isomorphism approaches. &copy; Springer International Publishing AG 2017.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	issn       = {03029743},
	journal    = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	key        = {Cloning},
	keywords   = {Codes (symbols);Computer crime;Computer software reusability;Forestry;Malware;Mapping;Semantics;Software design;Trees (mathematics);},
	language   = {English},
	nºtabela   = {50},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1007/978-3-319-60876-1_15},
}

@InProceedings{Aktas2017,
	author     = {Aktas, Mehmet S. and Kapdan, Mustafa},
	title      = {Implementation of analytical hierarchy process in detecting structural code clones},
	year       = {2017},
	volume     = {10408 LNCS},
	pages      = {652 - 664},
	address    = {Trieste, Italy},
	note       = {Analytical Hierarchy Process;Code clone;Identification algorithms;Identification approach;Identification techniques;Object-oriented software systems;Software metrics;Structural codes;},
	abstract   = {The nature and the size of data plays an important rule at the identification process of similar objects (clones). The type of utilized similarity measures is also an important factor. The nature of data and selecting the right identification algorithm appropriate to type of data should be examined thoroughly when a clone identification technique is applied. This study suggests a new methodology in software systems for minimization/prevention of code cloning. Its main contribution is to propose an Analytical Hierarchy Process based methodology at detection of code clones in object-oriented software systems, in which the software is represented by means of software metrics data at class level. The suggested clone detection model is able to select the most suitable code clone candidates by considering different correlation and distance metrics to identify code clones. To facilitate the testing and the usability of the suggested clone detection model, the system is used for detection of structural code clone. The methodology is validated by comparison with results obtained by human judges as well as by comparison with a plain structural code clone identification approach. The evaluation of the methodology is carried out in terms of accuracy and indicates promising results. &copy; Springer International Publishing AG 2017.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	issn       = {03029743},
	journal    = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	key        = {Cloning},
	keywords   = {Codes (symbols);Computer software;Object oriented programming;Soft computing;},
	language   = {English},
	nºtabela   = {51},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1007/978-3-319-62404-4_48},
}

@Article{Tekchandani2017,
	author     = {Tekchandani, Rajkumar and Bhatia, Rajesh and Singh, Maninder},
	title      = {Code clone genealogy detection on e-health system using Hadoop},
	journal    = {Computers and Electrical Engineering},
	year       = {2017},
	volume     = {61},
	pages      = {15 - 30},
	issn       = {00457906},
	note       = {Code clone;Distributed version control systems;E health;Medical record systems;Software systems;Source code repositories;Transitive closure;Transitive closure computations;},
	abstract   = {Code clone genealogy detection has been widely used in refactoring and maintenance of code in software systems. It identifies history of code clones in a source code repository. Existing code clone genealogy detection techniques are based on text similarity for extraction of different versions of program. However, existing proposals in literature for code clone genealogy detection fail to extract code clone genealogy on Git (a distributed version control system). To address this issue, we presented a new scheme, based on transitive closure computation that detects code clone genealogies in e-health system on Git. Our insight is to extract clone pairs from thousands of commits on a software system in Git by transitive closure computation. We implemented the proposed scheme using Hadoop and Neo4j on Open Medical Record System. The results prove efficacy of the proposed scheme using parameters such as transitive depth, ratio of similarity, and count of clones. &copy; 2017 Elsevier Ltd},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	key        = {Cloning},
	keywords   = {Codes (symbols);Computer software;Health;History;},
	language   = {English},
	nºtabela   = {52},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1016/j.compeleceng.2017.05.011},
}

@Article{Farhadi2015,
	author     = {Farhadi, Mohammad Reza and Fung, Benjamin C.M. and Fung, Yin Bun and Charland, Philippe and Preda, Stere and Debbabi, Mourad},
	title      = {Scalable code clone search for malware analysis},
	journal    = {Digital Investigation},
	year       = {2015},
	volume     = {15},
	pages      = {46 - 60},
	issn       = {17422876},
	note       = {Assembly code;Code mutation;Database modeling;Malware analysis;Scalable systems;Search method;Search system;Software security;},
	abstract   = {Reverse engineering is the primary step to analyze a piece of malware. After having disassembled a malware binary, a reverse engineer needs to spend extensive effort analyzing the resulting assembly code, and then documenting it through comments in the assembly code for future references. In this paper, we have developed an assembly code clone search system called ScalClone based on our previous work on assembly code clone detection systems. The objective of the system is to identify the code clones of a target malware from a collection of previously analyzed malware binaries. Our new contributions are summarized as follows: First, we introduce two assembly code clone search methods for malware analysis with a high recall rate. Second, our methods allow malware analysts to discover both exact and inexact clones at different token normalization levels. Third, we present a scalable system with a database model to support large-scale assembly code search. Finally, experimental results on real-life malware binaries suggest that our proposed methods can effectively identify assembly code clones with the consideration of different scenarios of code mutations.<br/> &copy; 2015 Elsevier Ltd.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	key        = {Codes (symbols)},
	keywords   = {Bins;Cloning;Computer crime;Malware;Reverse engineering;},
	language   = {English},
	nºtabela   = {53},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1016/j.diin.2015.06.001},
}

@Article{Sargsyan2016,
	author     = {Sargsyan, S. and Kurmangaleev, Sh. and Belevantsev, A. and Avetisyan, A.},
	title      = {Scalable and accurate detection of code clones},
	journal    = {Programming and Computer Software},
	year       = {2016},
	volume     = {42},
	number     = {1},
	pages      = {27 - 33},
	issn       = {03617688},
	note       = {Code clone;Code line;Open SSL;Program code;Program dependence graph;Second phase;Semantic analysis;Subgraphs;},
	abstract   = {A detailed description of a method for detection of code clones is described. This method is based on the semantic analysis of programs and on new algorithms that make it scalable without affecting its accuracy. The proposed method involves two phases. In the first phase, the program dependence graph (PDG) is constructed while the program is compiled. LLVM is used as the compilation infrastructure. In the second phase, similar subgraphs of maximum size that represent code clones are detected. Before starting the search for similar subgraphs, the PDG is divided into subgraphs that will be considered as potential clones of each other. To ensure scalability of the search for similar subgraphs, the composition of algorithms is used. The first algorithm checks that a pair of graphs cannot have similar subgraphs of the desired size; this is done in a linear amount of time. If this algorithm fails, another (approximate) algorithm is executed to find similar subgraphs of maximum size. After similar subgraphs have been found, the program code is additionally checked for the position of the code lines corresponding to the detected clone candidates. Tests showed that the developed tool is more accurate than similar tools, such as MOSS, CCFinder, and CloneDR. Results obtained for the projects Linux-2.6, Firefox Mozilla, LLVM/Clang, and OpenSSL are presented. &copy; 2016, Pleiades Publishing, Ltd.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	key        = {Cloning},
	keywords   = {Algorithms;Codes (symbols);Computer operating systems;Semantics;},
	language   = {English},
	nºtabela   = {54},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1134/S0361768816010072},
}

@InProceedings{Lin2015,
	author     = {Lin, Yun and Peng, Xin and Xing, Zhenchang and Zheng, Diwen and Zhao, Wenyun},
	title      = {Clone-based and interactive recommendation for modifying pasted code},
	year       = {2015},
	pages      = {520 - 531},
	address    = {Bergamo, Italy},
	note       = {Code clone;Copy-and-paste;Differencing;Recommendation;Reuse;},
	abstract   = {Developers often need to modify pasted code when programming with copy-and-paste practice. Some modifications on pasted code could involve lots of editing efforts, and any missing or wrong edit could incur bugs. In this paper, we propose a clone-based and interactive approach to recommending where and how to modify the pasted code. In our approach, we regard clones of the pasted code as the results of historical copy-and-paste operations and their differences as historical modifications on the same piece of code. Our approach first retrieves clones of the pasted code from a clone repository and detects syntactically complete differences among them. Then our approach transfers each clone difference into a modification slot on the pasted code, suggests options for each slot, and further mines modifying regulations from the clone differences. Based on the mined modifying regulations, our approach dynamically updates the suggested options and their ranking in each slot according to developer's modifications on the pasted code. We implement a proof-of-concept tool CCDemon based on our approach and evaluate its effectiveness based on code clones detected from five open source projects. The results show that our approach can identify 96.9% of the to-be-modified positions in pasted code and suggest 75.0% of the required modifications. Our human study further confirms that CCDemon can help developers to accomplish their modifications of pasted code more efficiently. &copy; 2015 ACM.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	journal    = {2015 10th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2015 - Proceedings},
	key        = {Open systems},
	keywords   = {Cloning;Codes (symbols);Copying;Open source software;Software engineering;},
	language   = {English},
	nºtabela   = {55},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1145/2786805.2786871},
}

@Article{Aktas2016,
	author     = {Aktas, Mehmet S. and Kapdan, Mustafa},
	title      = {Structural Code Clone Detection Methodology Using Software Metrics},
	journal    = {International Journal of Software Engineering and Knowledge Engineering},
	year       = {2016},
	volume     = {26},
	number     = {2},
	pages      = {307 - 332},
	issn       = {02181940},
	note       = {Code clone;Object oriented metrics;Object-oriented software metrics;Open source software projects;Software development cycles;Software maintenance costs;Software metrics;Structural codes;},
	abstract   = {Unnecessary repeated codes, also known as code clones, have not been well documented and are difficult to maintain. Code clones may become an important problem in the software development cycle, since any detected error must be fixed in all occurrences. This condition significantly increases software maintenance costs and requires effort/duration for understanding the code. This research introduces a novel methodology to minimize or prevent the code cloning problem in software projects. In particular, this manuscript is focused on the detection of structural code clones, which are defined as similarity in software structure such as design patterns. Our proposed methodology provides a solution to the class-level structural code clone detection problem. We introduce a novel software architecture that provides unification of different software quality analysis tools that take measurements for software metrics for structural code clone detection. We present an empirical evaluation of our approach and investigate its practical usefulness. We conduct a user study using human judges to detect structural code clones in three different open-source software projects. We apply our methodology to the same projects and compare results. The results show that our proposed solution is able to show high consistency compared with the results reached by the human judges. The outcome of this study also indicates that a uniform structural code clone detection system can be built on top of different software quality tools, where each tool takes measurements of different object-oriented software metrics. &copy; 2016 World Scientific Publishing Company.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	key        = {Object oriented programming},
	keywords   = {Cloning;Codes (symbols);Computer software selection and evaluation;Open source software;Open systems;Quality control;Software design;Software engineering;},
	language   = {English},
	nºtabela   = {56},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1142/S0218194016500133},
}

@Article{Li2016,
	author     = {Li, Hongzhe and Kwon, Hyuckmin and Kwon, Jonghoon and Lee, Heejo},
	title      = {CLORIFI: Software vulnerability discovery using code clone verification},
	journal    = {Concurrency Computation},
	year       = {2016},
	volume     = {28},
	number     = {6},
	pages      = {1900 - 1917},
	issn       = {15320626},
	note       = {Apache software foundations;Code clone;Concolic execution;Concolic testing;Open source projects;Program source codes;Real world projects;Software vulnerabilities;},
	abstract   = {Software vulnerability has long been considered an important threat to the system safety. A vulnerability is often reproduced because of the frequent code reuse by programmers. Security patches are usually not propagated to all code clones; however, they could be leveraged to discover unknown vulnerabilities. Static code auditing approaches are frequently proposed to scan source codes for security flaws; unfortunately, these approaches generate too many false positives. While dynamic execution analysis methods can precisely report vulnerabilities, they are ineffective in path exploration, which limits them to scale to large programs. With the purpose of detecting vulnerability in a scalable way with more preciseness, in this paper, we propose a novel mechanism, called software vulnerability discovery using Code Clone Verification (CLORIFI), that scalably discovers vulnerabilities in real world programs using code clone verification. In the beginning, we use a fast and scalable syntax-based way to find code clones in program source codes based on released security patches. Subsequently, code clones are being verified using concolic testing to dramatically decrease the false positives. In addition, we mitigate the path explosion problem by backward sensitive data tracing in concolic execution. Experiments have been conducted with real-world open-source projects (recent Linux OS distributions and program packages). As a result, we found 7 real vulnerabilities out of 63 code clones from Ubuntu 14.04 LTS (Canonical, London, UK) and 10 vulnerabilities out of 40 code clones from CentOS 7.0 (The CentOS Project(community contributed)). Furthermore, we confirmed more code clone vulnerabilities in various versions of programs including Rsyslog (Open Source(Original author: Rainer Gerhards)), Apache (Apache Software Foundation, Forest Hill, Maryland, USA) and Firefox (Mozilla Corporation, Mountain View, California, USA). In order to evaluate the effectiveness of vulnerability verification in a systematic way, we also utilized Juliet Test Suite as measurement objects. The results show that CLORIFI achieves 98% accuracy with 0 false positives. Copyright &copy; 2015 John Wiley & Sons, Ltd.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	key        = {Open systems},
	keywords   = {Cloning;Codes (symbols);Computer operating systems;Computer programming;Java programming language;Linux;Mobile security;Open source software;Software packages;Software testing;Verification;},
	language   = {English},
	nºtabela   = {57},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1002/cpe.3532},
}

@Article{Fordos2016,
	author     = {Fordos, Viktoria and Toth, Melinda},
	title      = {Identifying code clones with refactorerl},
	journal    = {Acta Cybernetica},
	year       = {2016},
	volume     = {22},
	number     = {3},
	pages      = {553 - 571},
	issn       = {0324721X},
	note       = {Clone detection algorithms;Code clone;Identifying code;Maintenance cost;Source codes;Tools and techniques;},
	abstract   = {Code clones, the results of "copy&amp;paste programming", have a negative impact on software maintenance. Therefore several tools and techniques have been developed to identify them in the source code. Most of them concentrate on imperative, well known languages, while in this paper, we give an AST/metric based clone detection algorithm for the functional programming language Erlang. We propose a standalone solution that does not overload users with results that are insignificant from the point of view of the user. We emphasise that the maintenance costs can be decreased by using our solution, because the programmers need to deal only with important issues.<br/>},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	key        = {Functional programming},
	keywords   = {Cloning;Codes (symbols);Computational linguistics;Computer programming;},
	language   = {English},
	nºtabela   = {58},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.14232/actacyb.22.3.2016.1},
}

@InProceedings{Mahajan2014,
	author     = {G. Mahajan and M. Bharti},
	title      = {Implementing a 3-way approach of clone detection and removal using PC Detector tool},
	booktitle  = {2014 IEEE International Advance Computing Conference (IACC)},
	year       = {2014},
	pages      = {1435-1441},
	month      = {Feb},
	doi        = {10.1109/IAdCC.2014.6779537},
	keywords   = {program diagnostics;software maintenance;PC detector tool;clone removal;code clone detection;code duplication;copy paste programming;evolution process;model based visual analysis;pattern based semantic analysis;software engineering;software maintainability;syntactical code analysis;Analytical models;Cloning;Detectors;Maintenance engineering;Semantics;Software;Unified modeling language;Code clones;Model clones;PC Detector;Software Cloning},
	nºtabela   = {59},
	repository = {IEEE},
}

@InProceedings{Cuomo2012,
	author     = {A. Cuomo and A. Santone and U. Villano},
	title      = {A novel approach based on formal methods for clone detection},
	booktitle  = {2012 6th International Workshop on Software Clones (IWSC)},
	year       = {2012},
	pages      = {8-14},
	month      = {June},
	doi        = {10.1109/IWSC.2012.6227879},
	keywords   = {Java;calculus of communicating systems;formal verification;Java bytecode;calculus of communicating systems;code clone detection;formal method;Abstracts;Algebra;Cloning;Java;Prototypes;Semantics;Syntactics;CCS;Clone detection;Formal Methods},
	nºtabela   = {60 },
	repository = {IEEE},
}

@InProceedings{Li2011,
	author     = {Li, Huiqing and Thompson, Simon},
	title      = {Incremental clone detection and elimination for Erlang programs},
	year       = {2011},
	volume     = {6603 LNCS},
	pages      = {356 - 370},
	address    = {Saarbrucken, Germany},
	note       = {Code clone detection;Erlang;Program analysis;Program transformation;Refactorings;Software maintenance;Wrangler;},
	abstract   = {A well-known bad code smell in refactoring and software maintenance is the existence of code clones, which are code fragments that are identical or similar to one another. This paper describes an approach to incrementally detecting 'similar' code based on the notion of least-general common abstraction, or anti-unification, as well as a framework for user-controlled incremental elimination of code clones within the context of Erlang programs. The clone detection algorithm proposed in this paper achieves 100% precision, high recall rate, and is user-customisable regarding the granularity of the clone classes reported. By detecting and eliminating clones in an incremental way, we make it possible for the tool to be used in an interactive way even with large codebases. Both the clone detection and elimination functionalities are integrated with Wrangler, a tool for interactive refactoring of Erlang programs. We evaluate the approach with various case studies. &copy; 2011 Springer-Verlag.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	issn       = {03029743},
	journal    = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
	key        = {Computer software maintenance},
	keywords   = {Cloning;Software engineering;},
	language   = {English},
	nºtabela   = {61},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1007/978-3-642-19811-3_25},
}

@InProceedings{Shi2013,
	author     = {Qing Qing Shi and Li Ping Zhang and Fan Jun Meng and Dong Sheng Liu},
	title      = {A novel detection approach for statement clones},
	booktitle  = {2013 IEEE 4th International Conference on Software Engineering and Service Science},
	year       = {2013},
	pages      = {27-30},
	month      = {May},
	doi        = {10.1109/ICSESS.2013.6615249},
	issn       = {2327-0586},
	keywords   = {C++ language;Java;public domain software;software maintenance;C language;C++ language;Java language;SaCD;clone detection approach;clone detection tool;code clones;code copying;code modification;code pasting;open source software systems;repeated token substrings;software development;software maintenance;statement clones;statement granularity;suffix array;Arrays;Cloning;Java;Random access memory;Software;DC3 algorithm;clone detection;code clone;suffix array;token string},
	nºtabela   = {62},
	repository = {IEEE},
}

@InProceedings{Murakami2012,
	author     = {Murakami, Hiroaki and Hotta, Keisuke and Higo, Yoshiki and Igaki, Hiroshi and Kusumoto, Shinji},
	title      = {Folding repeated instructions for improving token-based code clone detection},
	year       = {2012},
	pages      = {64 - 73},
	address    = {Riva del Garda, Trento, Italy},
	note       = {Code clone;Code clone detection;Deep sources;Detection methods;False positive;False-positive reduction;High scalabilities;Intermediate structures;Overlapped codes;Quantitative evaluation;Source codes;Suffix arrays;},
	abstract   = {A variety of code clone detection methods have been proposed before now. However, only a small part of them is widely used. Widely-used methods are line-based and token-based ones. They have high scalability because they neither require deep source code analysis nor constructing complex intermediate structures for the detection. High scalability is one of the big advantages in code clone detection tools. On the other hand, line/token-based detections yield many false positives. One of the factors is the presence of repeated instructions in the source code. For example, herein we assume that there are consecutive three printf statements in C source code. If we apply a token-based detection to them, the former two statements are detected as a code clone of the latter two statements. However, such overlapped code clones are redundant and so not useful for developers. In this paper, we propose a new detection method that is free from the influence of the presence of repeated instructions. The proposed method transforms every of repeated instructions into a special form, and then it detects code clones using a suffix array algorithm. The transformation prevents many false positives from being detected. Also, the detection speed remains. The proposed detection method has already been developed as a software tool, FRISC. We confirmed the usefulness of the proposed method by conducting a quantitative evaluation of FRISC with Bellon's oracle. &copy; 2012 IEEE.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	journal    = {Proceedings - 2012 IEEE 12th International Working Conference on Source Code Analysis and Manipulation, SCAM 2012},
	key        = {Cloning},
	keywords   = {Computer programming languages;Scalability;},
	language   = {English},
	nºtabela   = {63},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1109/SCAM.2012.21},
}

@InProceedings{Kodhai2010a,
	author     = {E. Kodhai and S. Kanmani and A. Kamatchi and R. Radhika and B. V. Saranya},
	title      = {Detection of Type-1 and Type-2 Code Clones Using Textual Analysis and Metrics},
	booktitle  = {2010 International Conference on Recent Trends in Information, Telecommunication and Computing},
	year       = {2010},
	pages      = {241-243},
	month      = {March},
	doi        = {10.1109/ITC.2010.55},
	keywords   = {software maintenance;software metrics;C source code;Type-1code clone;Type-2 code clone;functional clone;textual analysis;textual metrics;Application software;Cloning;Information analysis;Java;Plagiarism;Programming profession;Software maintenance;Software metrics;Software systems;Telecommunication computing;Clone Detection;Functional Clones;Software Metrics;String-matching;Text-based Comparison},
	nºtabela   = {64 },
	repository = {IEEE},
}

@InProceedings{Santone2011,
	author     = {Santone, Antonella},
	title      = {Clone detection through process algebras and Java Bytecode},
	year       = {2011},
	pages      = {73 - 74},
	address    = {Waikiki, Honolulu, HI, United states},
	note       = {CCS;Clone detection;Java byte codes;Process algebras;Source codes;},
	abstract   = {In this paper we present a formal method-based approach in detecting source code clones by means of analysing and comparing the Java Bytecode that is produced when the source code is compiled. A preliminary investigation has been also conducted to assess the validity of the proposed approach. &copy; 2011 ACM.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	issn       = {02705257},
	journal    = {Proceedings - International Conference on Software Engineering},
	key        = {Formal methods},
	keywords   = {Cloning;Computer software;Java programming language;},
	language   = {English},
	nºtabela   = {65},
	repository = {EI COMPENDEX},
	url        = {http://dx.doi.org/10.1145/1985404.1985422},
}

@InProceedings{Tekchandani2013,
	author     = {R. Tekchandani and R. K. Bhatia and M. Singh},
	title      = {Semantic code clone detection using parse trees and grammar recovery},
	booktitle  = {Confluence 2013: The Next Generation Information Technology Summit (4th International Conference)},
	year       = {2013},
	pages      = {41-46},
	month      = {Sept},
	doi        = {10.1049/cp.2013.2291},
	keywords   = {grammars;software engineering;trees (mathematics);code duplication;formal grammars;grammar recovery;parse trees;program dependence graphs;semantic code clone detection;similar code fragments;software development;Code Clones;Grammar Recovery;Parse Trees;Semantic Code Clones},
	nºtabela   = {66},
	repository = {IEEE},
}

@InProceedings{Kraft2008,
	author     = {Kraft, Nicholas A. and Bonds, Brandon W. and Smith, Randy K.},
	title      = {Cross-language clone detection},
	year       = {2008},
	pages      = {54 - 59},
	address    = {San Francisco Bay, CA, United states},
	note       = {Clone detection;Clone detection algorithms;Code duplication;Common software;Multiple languages;Software systems;Tree structures;Visual Basic .NET;},
	abstract   = {Code duplication is a common software development practice that introduces several similar or identical segments of code, or code clones. In addition, there is currently a trend towards the use of multiple languages in the development of software systems. While there has been much work on clone detection and increased interest in studies of multi-language software systems, there have been no studies of code clones that span multiple languages, which we term cross-language code clones. In this paper we describe an approach for cross-language clone detection. We then introduce a tool, which is based on the CodeDOM library that is included with the Microsoft .NET Framework, to demonstrate the existence of cross-language clones in a real software system that contains both C# and Visual Basic. NET source code. Because our clone detection algorithm operates on a tree structure, other tree-based clone detection algorithms could be substituted in the implementation of our tool.},
	copyright  = {Compilation and indexing terms, Copyright 2018 Elsevier Inc.},
	journal    = {20th International Conference on Software Engineering and Knowledge Engineering, SEKE 2008},
	key        = {Cloning},
	keywords   = {Computer software;Knowledge engineering;Linguistics;Signal detection;Tools;Trees (mathematics);Visual BASIC;},
	language   = {English},
	nºtabela   = {67},
	repository = {EI COMPENDEX},
}

@InProceedings{Yuki2017,
	author     = {Y. Yuki and Y. Higo and S. Kusumoto},
	title      = {A technique to detect multi-grained code clones},
	booktitle  = {2017 IEEE 11th International Workshop on Software Clones (IWSC)},
	year       = {2017},
	pages      = {1-7},
	month      = {Feb},
	doi        = {10.1109/IWSC.2017.7880510},
	keywords   = {software maintenance;source code (software);coarse-to-fine-grained-clone detection;code fragment detection;detection target granularity;multigrained code clone detection;software maintenance;source code;Cloning;Computer bugs;Filtering;Information science;Java;Libraries;Software;code-fragment-level clone;file-level clone;method-level clone;multi-grained detection technique},
	nºtabela   = {68},
	repository = {IEEE},
}

@InProceedings{Maeda2009,
	author     = {K. Maeda},
	title      = {Code clone detection using parsing actions},
	booktitle  = {2009 9th International Symposium on Communications and Information Technology},
	year       = {2009},
	pages      = {762-763},
	month      = {Sept},
	doi        = {10.1109/ISCIT.2009.5341139},
	keywords   = {XML;computational linguistics;formal languages;grammars;program compilers;source coding;PALEX source code representation;XML;code clone detection technique;compiler process;language independency;lexical formatting information;parsing action;syntactic point;syntax sensitive token-based approach;Arithmetic;Cloning;Computer bugs;Information analysis;Information science;Productivity;Software tools;Testing;White spaces;XML},
	nºtabela   = {69 },
	repository = {IEEE},
}

@InProceedings{Yuan2012a,
	author     = {Y. Yuan and Y. Guo},
	title      = {Boreas: an accurate and scalable token-based approach to code clone detection},
	booktitle  = {2012 Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering},
	year       = {2012},
	pages      = {286-289},
	month      = {Sept},
	doi        = {10.1145/2351676.2351725},
	keywords   = {Java;Linux;matrix algebra;program debugging;program testing;software engineering;Boreas;Deckard syntactic-based tool;JDK 7 source code;Linux kernel 2.6.38.6 source code;characteristic matrices;counting-based method;execution time reduction;program code clone detection;scalable token-based approach;software engineering;Code clone detection;count matrix;count vector},
	nºtabela   = {70},
	repository = {IEEE},
}

@InProceedings{Karus2015,
	author     = {S. Karus and K. Kilgi},
	title      = {Code clone detection using wavelets},
	booktitle  = {2015 IEEE 9th International Workshop on Software Clones (IWSC)},
	year       = {2015},
	pages      = {8-14},
	month      = {March},
	doi        = {10.1109/IWSC.2015.7069883},
	keywords   = {program diagnostics;software maintenance;source code (software);wavelet transforms;code clone detection;code maintenance;wavelet analysis;Cloning;Detection algorithms;Detectors;Semantics;Wavelet analysis;Wavelet transforms;code clones;experiment;wavelets},
	nºtabela   = {71},
	repository = {IEEE},
}

@InProceedings{Krutz2013,
	author     = {D. E. Krutz and E. Shihab},
	title      = {CCCD: Concolic code clone detection},
	booktitle  = {2013 20th Working Conference on Reverse Engineering (WCRE)},
	year       = {2013},
	pages      = {489-490},
	month      = {Oct},
	doi        = {10.1109/WCRE.2013.6671332},
	issn       = {1095-1350},
	keywords   = {program diagnostics;software maintenance;software tools;CCCD;Concolic Code Clone Discovery tool;clone detection tool;concolic analysis;concolic code clone detection;type-4 clones;Cloning;Conferences;IEEE Computer Society;Software;Software engineering;Software reliability},
	nºtabela   = {72},
	repository = {IEEE},
}

@InProceedings{Kamiya2015,
	author     = {T. Kamiya},
	title      = {An execution-semantic and content-and-context-based code-clone detection and analysis},
	booktitle  = {2015 IEEE 9th International Workshop on Software Clones (IWSC)},
	year       = {2015},
	pages      = {1-7},
	month      = {March},
	doi        = {10.1109/IWSC.2015.7069882},
	keywords   = {program diagnostics;programming languages;public domain software;software metrics;source code (software);arbitrary-granularity model;clone metrics;code search;content-and-context-based code-clone detection;control sentences;execution semantic;execution-semantic-based code-clone detection;lambda;lazy evaluation;open-source products;programming languages;Cloning;Computer languages;Context;Heuristic algorithms;Object oriented modeling;Prototypes;Visualization},
	nºtabela   = {73},
	repository = {IEEE},
}

@InProceedings{Raheja2013,
	author     = {K. Raheja and R. K. Tekchandani},
	title      = {An efficient code clone detection model on Java byte code using hybrid approach},
	booktitle  = {Confluence 2013: The Next Generation Information Technology Summit (4th International Conference)},
	year       = {2013},
	pages      = {16-21},
	month      = {Sept},
	doi        = {10.1049/cp.2013.2287},
	keywords   = {Java;software maintenance;software metrics;software reliability;source code (software);Java byte code;Java source code;code clone detection model;hybrid clone detection technique;software cloning;software engineering;software metrics;Byte code;Clone detection;Hybrid approach;Potential Clones;metrics computation},
	nºtabela   = {74},
	repository = {IEEE},
}

@InProceedings{Patil2015,
	author     = {R. V. Patil and S. D. Joshi and S. V. Shinde and D. A. Ajagekar and S. D. Bankar},
	title      = {Code clone detection using decentralized architecture and code reduction},
	booktitle  = {2015 International Conference on Pervasive Computing (ICPC)},
	year       = {2015},
	pages      = {1-6},
	month      = {Jan},
	doi        = {10.1109/PERVASIVE.2015.7087126},
	keywords   = {program debugging;software reusability;PDG;code clone detection;code fragment;code reduction;decentralized architecture;generative programming approach;reuse approach;software development process;type-I clones;type-II clones;Cloning;Complexity theory;Computer architecture;Detectors;Measurement;Programming;Software;Bug;CCFinder;Duploc;PDG;code fragment;distributed system;merging;parallel processing;refactoring;restructuring},
	nºtabela   = {75},
	repository = {IEEE},
}

@InProceedings{Avetisyan2015,
	author     = {A. Avetisyan and S. Kurmangaleev and S. Sargsyan and M. Arutunian and A. Belevantsev},
	title      = {LLVM-based code clone detection framework},
	booktitle  = {2015 Computer Science and Information Technologies (CSIT)},
	year       = {2015},
	pages      = {100-104},
	month      = {Sept},
	doi        = {10.1109/CSITechnol.2015.7358259},
	keywords   = {Linux;program compilers;program diagnostics;source code (software);CloneDR. tools;LLVM bitcode;LLVM-based code clone detection framework;Linux-2.6 kernel;MOSS tools;code fragments;lexical approach;metrics based approach;program semantic analysis;source code;syntactic based approach;textual approach;Algorithm design and analysis;Approximation algorithms;Cloning;Clustering algorithms;Image edge detection;Measurement;Semantics;LLVM;code clone;program dependence graph},
	nºtabela   = {76},
	repository = {IEEE},
}

@InProceedings{Bansal2014,
	author     = {G. Bansal and R. Tekchandani},
	title      = {Selecting a set of appropriate metrics for detecting code clones},
	booktitle  = {2014 Seventh International Conference on Contemporary Computing (IC3)},
	year       = {2014},
	pages      = {484-488},
	month      = {Aug},
	doi        = {10.1109/IC3.2014.6897221},
	keywords   = {C language;software maintenance;software metrics;source code (software);C language software system;code clone detection;maintenance problem;software development;software metrics;Cloning;Complexity theory;Software engineering;Software metrics;Software systems;clone class;clone detection;clone pair;code cloning;software metrics},
	nºtabela   = {77},
	repository = {IEEE},
}

@InProceedings{Jang2012,
	author     = {J. Jang and A. Agrawal and D. Brumley},
	title      = {ReDeBug: Finding Unpatched Code Clones in Entire OS Distributions},
	booktitle  = {2012 IEEE Symposium on Security and Privacy},
	year       = {2012},
	pages      = {48-62},
	month      = {May},
	doi        = {10.1109/SP.2012.13},
	issn       = {1081-6011},
	keywords   = {C++ language;Linux;operating system kernels;program debugging;safety-critical software;software packages;C++ project;Debian Lenny/Squeeze;Debian Squeeze package;Debian/Ubuntu security-related patches;Linux kernel;OS-distribution scale code bases;ReDeBug;Source Forge C;Ubuntu Maverick/Oneiric;buggy code;code clone detection;commodity desktop machine;false detection rate;latent bug;security-critical problem;source code database;syntax-based approach;unpatched code clone;vulnerable code;Cloning;Computer bugs;Context;Kernel;Linux;Scalability;Security;debug;scalability;unpatched code clone},
	nºtabela   = {78},
	repository = {IEEE},
}

@InProceedings{Li2017,
	author     = {L. Li and H. Feng and W. Zhuang and N. Meng and B. Ryder},
	title      = {CCLearner: A Deep Learning-Based Clone Detection Approach},
	booktitle  = {2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
	year       = {2017},
	pages      = {249-260},
	month      = {Sept},
	doi        = {10.1109/ICSME.2017.46},
	keywords   = {learning (artificial intelligence);pattern classification;program debugging;program diagnostics;public domain software;software maintenance;software reusability;source code (software);trees (mathematics);AST;BigCloneBench;CCLEARNER;CCLearner;abstract syntax trees;bug fixes;classifier training;clone detection tools;code locations;code reuse;codebase;competitive clone detection effectiveness;deep learning-based clone detection approach;method-level code clones;program changes;programming productivity;software development;software maintenance;source code tokenization;token-based clone detection approach;tree-matching algorithms;Cloning;Feature extraction;Machine learning;Neural networks;Testing;Tools;Training;clone detection;deep learning;empirical},
	nºtabela   = {79},
	repository = {IEEE79},
}

@InProceedings{Gabel2008,
	author     = {M. Gabel and L. Jiang and Z. Su},
	title      = {Scalable detection of semantic clones},
	booktitle  = {2008 ACM/IEEE 30th International Conference on Software Engineering},
	year       = {2008},
	pages      = {321-330},
	month      = {May},
	doi        = {10.1145/1368088.1368132},
	issn       = {0270-5257},
	keywords   = {Linux;data flow graphs;program compilers;program control structures;program debugging;trees (mathematics);Linux kernel;PDG subgraphs;bugs location;code clones;contiguous syntax;graph similarity problem;isomorphic PDG;million-line open source projects;program code fragments;program dependence graphs;program design;program fragments;program representations;real world code bases;redundant code;reordered statements;scalable clone detection algorithm;scalable detection;semantic clones;semantic information;semantically equivalent control structures;structured syntax;tree similarity problem;Cloning;Computer bugs;Computer science;Detection algorithms;Kernel;Linux;Performance evaluation;Software algorithms;Software maintenance;Tree graphs;clone detection;program dependence graph;refactoring;software maintenance},
	nºtabela   = {80},
	repository = {IEEE},
}

@InProceedings{Higo2011,
	author     = {Y. Higo and S. Kusumoto},
	title      = {Code Clone Detection on Specialized PDGs with Heuristics},
	booktitle  = {2011 15th European Conference on Software Maintenance and Reengineering},
	year       = {2011},
	pages      = {75-84},
	month      = {March},
	doi        = {10.1109/CSMR.2011.12},
	issn       = {1534-5351},
	keywords   = {directed graphs;software engineering;PDG detection heuristics;PDG-based code clone detection;open source systems;program dependency graph;software systems;Cloning;Computational complexity;Computational efficiency;Image edge detection;Information science;Merging;Software systems;code clone;program dependency graph},
	nºtabela   = {81},
	repository = {IEEE},
}

@InProceedings{Keivanloo2015,
	author     = {I. Keivanloo and F. Zhang and Y. Zou},
	title      = {Threshold-free code clone detection for a large-scale heterogeneous Java repository},
	booktitle  = {2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
	year       = {2015},
	pages      = {201-210},
	month      = {March},
	doi        = {10.1109/SANER.2015.7081830},
	issn       = {1534-5351},
	keywords   = {Java;public domain software;F-measure;clone benchmark;dissimilarity threshold;heterogeneous Java repository;method granularity;open source Java projects;software ecosystems;threshold-free code clone detection algorithms;type-3 clone detection tools;Benchmark testing;Cloning;Clustering algorithms;Google;Java;Optimization methods;Software systems;clone detection;clone search;clustering;large-scale repository;threshold-free;unsupervised learning},
	nºtabela   = {82},
	repository = {IEEE},
}

@InProceedings{Yu2017,
	author     = {D. Yu and J. Wang and Q. Wu and J. Yang and J. Wang and W. Yang and W. Yan},
	title      = {Detecting Java Code Clones with Multi-granularities Based on Bytecode},
	booktitle  = {2017 IEEE 41st Annual Computer Software and Applications Conference (COMPSAC)},
	year       = {2017},
	volume     = {1},
	pages      = {317-326},
	month      = {July},
	doi        = {10.1109/COMPSAC.2017.104},
	issn       = {0730-3157},
	keywords   = {Java;software maintenance;software tools;source coding;Java bytecode;Java code clone detection;Java source code;block level;block-level code fragments;code clone detection method;duplicate code sequences;instruction sequences;method call sequences;method level;software re-engineering;Cloning;Feature extraction;Java;Semantics;Software;Syntactics;Tools;Java bytecode;code clone detection;instruction;method call;multi-granularities},
	nºtabela   = {83},
	repository = {IEEE},
}

@InProceedings{Jung2010,
	author     = {W. Jung and C. Wu and E. Lee},
	title      = {WSIM: Detecting Clone Pages Based on 3-Levels of Similarity Clues},
	booktitle  = {2010 IEEE/ACIS 9th International Conference on Computer and Information Science},
	year       = {2010},
	pages      = {702-707},
	month      = {Aug},
	doi        = {10.1109/ICIS.2010.102},
	keywords   = {Internet;Web applications;clone page detection;code clones;dynamic selection;passed parameter;similarity clue;static selection;target entities;web page;Accuracy;Cloning;Complexity theory;Noise;Software;Visualization;Web pages;page clone;similarity;web application},
	nºtabela   = {84},
	repository = {IEEE},
}

@InProceedings{Murakami2013,
	author     = {H. Murakami and K. Hotta and Y. Higo and H. Igaki and S. Kusumoto},
	title      = {Gapped code clone detection with lightweight source code analysis},
	booktitle  = {2013 21st International Conference on Program Comprehension (ICPC)},
	year       = {2013},
	pages      = {93-102},
	month      = {May},
	doi        = {10.1109/ICPC.2013.6613837},
	issn       = {1092-8138},
	keywords   = {program diagnostics;software tools;text analysis;trees (mathematics);AST-based technique;Bellon benchmark;CDSW;LCS algorithm;PDG-based technique;Smith-Waterman algorithm;abstract syntax tree;gapped code clone detection;metric-based technique;program dependency graph;software tool;source code analysis;text-based technique;Accuracy;Algorithm design and analysis;Benchmark testing;Cloning;Educational institutions;Software algorithms;Software systems;Code Clone;Program Analysis;Software Maintenance;Tool Comparison},
	nºtabela   = {85},
	repository = {IEEE},
}

@InProceedings{Keivanloo2012b,
	author     = {I. Keivanloo and J. Rilling},
	title      = {Clone detection meets Semantic Web-based transitive closure computation},
	booktitle  = {2012 First International Workshop on Realizing AI Synergies in Software Engineering (RAISE)},
	year       = {2012},
	pages      = {12-16},
	month      = {June},
	doi        = {10.1109/RAISE.2012.6227963},
	keywords   = {directed graphs;inference mechanisms;inheritance;object-oriented programming;semantic Web;tree data structures;artificial intelligence;directed acyclic graphs;discourse knowledge modeling;inference engines;inheritance trees;object-oriented source code;semantic Web-based transitive closure computation;semantic source code clone detection;software analysis research;source code patterns;Cloning;Communities;Context;OWL;Pattern matching;Semantics;Clone detection;Semantic Web;object oriented},
	nºtabela   = {86},
	repository = {IEEE},
}

@InProceedings{Alomari2018,
	author     = {H. W. Alomari and M. Stephan},
	title      = {Towards slice-based semantic clone detection},
	booktitle  = {2018 IEEE 12th International Workshop on Software Clones (IWSC)},
	year       = {2018},
	pages      = {58-59},
	month      = {March},
	doi        = {10.1109/IWSC.2018.8327320},
	keywords   = {Linux;operating system kernels;software maintenance;Linux kernel;cloned slices;code clones;established clone detectors;slice-based semantic clone detection;software slice clone detection;software systems;Cloning;Kernel;Linux;Measurement;Semantics;Tools},
	nºtabela   = {87},
	repository = {IEEE},
}

@InProceedings{Liu2017,
	author     = {Z. Liu and Q. Wei and Y. Cao},
	title      = {VFDETECT: A vulnerable code clone detection system based on vulnerability fingerprint},
	booktitle  = {2017 IEEE 3rd Information Technology and Mechatronics Engineering Conference (ITOEC)},
	year       = {2017},
	pages      = {548-553},
	month      = {Oct},
	doi        = {10.1109/ITOEC.2017.8122356},
	keywords   = {cryptography;public domain software;software maintenance;VFDETECT;appropriate code blocks;bitmap;code sequence;hash function;high-efficiency methods;innovative fingerprint model;multiple code modification methods;open source software;preprocessed code blocks;real-world datasets detection;redundancy inserting;software security;vulnerability code;vulnerability fingerprint;vulnerable code clone detection system;vulnerable code reuse;Cloning;Data structures;Feature extraction;Fingerprint recognition;Kernel;Linux;code clone;vulnerability detection;vulnerability fingerprint},
	nºtabela   = {88},
	repository = {IEEE},
}

@InProceedings{Farhadi2014,
	author     = {M. R. Farhadi and B. C. M. Fung and P. Charland and M. Debbabi},
	title      = {BinClone: Detecting Code Clones in Malware},
	booktitle  = {2014 Eighth International Conference on Software Security and Reliability (SERE)},
	year       = {2014},
	pages      = {78-87},
	month      = {June},
	doi        = {10.1109/SERE.2014.21},
	keywords   = {invasive software;program diagnostics;reverse engineering;Bin Clone;BinClone;assembly code analysis;assembly code clone detection system;code clone fragment identification;commented assembly code archiving;deterministic clone detection method;inexact clone discovery;malware analysis;malware behaviour understanding;malware binaries;malware disassembly;malware repository;recall rate;reverse engineers;token normalization level;Assembly;Cloning;Detectors;Feature extraction;Malware;Registers;Vectors;Assembly Code Clone Detection;Binary Analysis;Malware Analysis;Reverse Engineering},
	nºtabela   = {89},
	repository = {IEEE},
}

@InProceedings{Saini2016,
	author     = {V. Saini and H. Sajnani and J. Kim and C. Lopes},
	title      = {SourcererCC and SourcererCC-I: Tools to Detect Clones in Batch Mode and during Software Development},
	booktitle  = {2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)},
	year       = {2016},
	pages      = {597-600},
	month      = {May},
	keywords   = {software engineering;source code (software);SourcererCC;SourcererCC-I;batch mode;code-block comparisons;interproject repositories;large-scale clone detection;near-miss clone detection;optimized inverted-index;required token-comparisons;software development;source-code repositories;standard workstation;token-based clone detector;type 3 clone detection;Cloning;Detectors;Indexes;Navigation;Scalability;Software;Standards;Code cloning;Large scale clone detection;eclipse plugin;scalable tool},
	nºtabela   = {90},
	repository = {IEEE},
}

@InProceedings{Lazar2014,
	author     = {F. M. Lazar and O. Banias},
	title      = {Clone detection algorithm based on the Abstract Syntax Tree approach},
	booktitle  = {2014 IEEE 9th IEEE International Symposium on Applied Computational Intelligence and Informatics (SACI)},
	year       = {2014},
	pages      = {73-78},
	month      = {May},
	doi        = {10.1109/SACI.2014.6840038},
	keywords   = {C language;computer science education;programming;source code (software);trees (mathematics);AST;C programming language;abstract syntax tree approach;program code analysis;programming techniques class;source code clone detection algorithm;three phase clone detection algorithm;Abstracts;Algorithm design and analysis;Cloning;Computer languages;Detection algorithms;Software systems;Syntactics},
	nºtabela   = {91},
	repository = {IEEE},
}

@InProceedings{Higo2011a,
	author     = {Y. Higo and U. Yasushi and M. Nishino and S. Kusumoto},
	title      = {Incremental Code Clone Detection: A PDG-based Approach},
	booktitle  = {2011 18th Working Conference on Reverse Engineering},
	year       = {2011},
	pages      = {3-12},
	month      = {Oct},
	doi        = {10.1109/WCRE.2011.11},
	issn       = {1095-1350},
	keywords   = {directed graphs;public domain software;software maintenance;PDG based incremental code clone detection technique;open source software;program dependency graph;prototype tool;software maintenance;software system;Approximation algorithms;Cloning;Context;Databases;Image edge detection;Prototypes;Software systems;Code clone;Incremental detection},
	nºtabela   = {92},
	repository = {IEEE},
}

@InProceedings{Kawaguchi2009,
	author     = {S. Kawaguchi and T. Yamashina and H. Uwano and K. Fushida and Y. Kamei and M. Nagura and H. Iida},
	title      = {SHINOBI: A Tool for Automatic Code Clone Detection in the IDE},
	booktitle  = {2009 16th Working Conference on Reverse Engineering},
	year       = {2009},
	pages      = {313-314},
	month      = {Oct},
	doi        = {10.1109/WCRE.2009.36},
	issn       = {1095-1350},
	keywords   = {software maintenance;software reliability;software tools;Microsoft Visual Studio;SHINOBI;automatic code clone detection;software program maintainability;software program reliability;Cloning;Event detection;Information science;Laboratories;Large-scale systems;Maintenance engineering;Programming profession;Reliability engineering;Reverse engineering;Software maintenance;code clone;software development environment;software tool},
	nºtabela   = {93},
	repository = {IEEE},
}

@InProceedings{Ali2011,
	author     = {A. F. M. Ali and S. Sulaiman and S. M. Syed-Mohamad},
	title      = {An enhanced generic pipeline model for code clone detection},
	booktitle  = {2011 Malaysian Conference in Software Engineering},
	year       = {2011},
	pages      = {434-438},
	month      = {Dec},
	doi        = {10.1109/MySEC.2011.6140712},
	keywords   = {software maintenance;software reusability;code clone detection;code reusability approach;copy-paste technique;enhanced generic pipeline model;software development;software maintainability;Adaptation models;Cloning;Load modeling;Maintenance engineering;Manganese;Pipelines;Software;Code clone;code clone detection;generic pipeline model;maintainability;reusability},
	nºtabela   = {94},
	repository = {IEEE},
}

@InProceedings{Rajakumari2013,
	author     = {K. E. Rajakumari and T. Jebarajan},
	title      = {A novel approach to effective detection and analysis of code clones},
	booktitle  = {Third International Conference on Innovative Computing Technology (INTECH 2013)},
	year       = {2013},
	pages      = {287-290},
	month      = {Aug},
	doi        = {10.1109/INTECH.2013.6653701},
	keywords   = {data mining;program diagnostics;software quality;text analysis;code clone analysis;code clone detection;data mining technique;software engineering;software maintenance;software quality;software system quality degradation;Cloning;Data mining;Educational institutions;Manuals;Software systems;Testing;Bad smells;Code clones;Data Mining Technique;Software Engineering},
	nºtabela   = {95},
	repository = {IEEE},
}

@InProceedings{Dong2012,
	author     = {L. Dong and J. Wang and L. Chen},
	title      = {Modular Heap Abstraction-Based Code Clone Detection for Heap-Manipulating Programs},
	booktitle  = {2012 12th International Conference on Quality Software},
	year       = {2012},
	pages      = {197-200},
	month      = {Aug},
	doi        = {10.1109/QSIC.2012.37},
	issn       = {1550-6002},
	keywords   = {iterative methods;program diagnostics;software maintenance;C benchmark program;context sensitive fix point iteration algorithm;field sensitive fix point iteration algorithm;heap-manipulating program;modular heap abstraction;semantic-based clone detection;software evolution;software maintenance;syntax-based clone detector;Abstracts;Cloning;Semantics;Software;Software engineering;Syntactics;USA Councils;code clone detection;heap-manipulating programs;modular heap abstraction;procedural summaries},
	nºtabela   = {96},
	repository = {IEEE},
}

@InProceedings{Wang2017,
	author     = {M. Wang and P. Wang and Y. Xu},
	title      = {CCSharp: An Efficient Three-Phase Code Clone Detector Using Modified PDGs},
	booktitle  = {2017 24th Asia-Pacific Software Engineering Conference (APSEC)},
	year       = {2017},
	pages      = {100-109},
	month      = {Dec},
	doi        = {10.1109/APSEC.2017.16},
	keywords   = {program diagnostics;public domain software;software reusability;CCSharp;PDG's structure modification;clone detection;code clones;downscale PDG's structure;high-level clones;modified PDGs;open source projects;software systems;three-phase PDG;three-phase code clone detector;Cloning;Handheld computers;Merging;Semantics;Software;Syntactics;Tools;PDG modification;characteristic vector filtering;code clone detection;program dependence graph},
	nºtabela   = {97},
	repository = {IEEE},
}

@InProceedings{Toomey2012,
	author     = {W. Toomey},
	title      = {Ctcompare: Code clone detection using hashed token sequences},
	booktitle  = {2012 6th International Workshop on Software Clones (IWSC)},
	year       = {2012},
	pages      = {92-93},
	month      = {June},
	doi        = {10.1109/IWSC.2012.6227881},
	keywords   = {cryptography;source coding;trees (mathematics);code clone detection;ctcompare;hashed token sequences;suffix trees;tokenized source code;Algorithm design and analysis;Australia;Cloning;Databases;Educational institutions;Redundancy;Time measurement;clone detection;code clone;code redundancy;hash function;software},
	nºtabela   = {98},
	repository = {IEEE},
}

@inproceedings{wieringa2006,
	author={R. Wieringa, N. Maiden, N. Mead and C. Rolland},
	title={Requirements engineering paper classification and evaluation criteria: a proposal and a discussion},
	journal={Requirements Eng.},
	pages={102–-107},
	year={2006}
}

@inproceedings{kitchenham2010,
	title={The value of mapping studies-a participant-observer case study},
	author={B.A. Kitchenham, D. Budgen and P. Brereton},
	booktitle={14th International Conference on Evaluation and Assessment in Software Engineering, British Computer Society},
	pages={25--33},
	year={2010}
}

@inproceedings{petersen2008,
	title={Systematic mapping studies in software engineering},
	author={K. Petersen, R. Feldt, S. Mujtaba and M. Mattsson},
	booktitle={12th International Conference on Evaluation and Assessment in Software Engineering},
	pages={1},
	year={2008}
}

@Article{Laguna2013,
	author     = {Miguel A. Laguna and Yania Crespo},
	title      = {A systematic mapping study on software product line evolution: From legacy system reengineering to product line refactoring},
	journal    = {Science of Computer Programming},
	year       = {2013},
	volume     = {78},
	number     = {8},
	pages      = {1010 - 1034},
	issn       = {0167-6423},
	note       = {Special section on software evolution, adaptability, and maintenance \&amp; Special section on the Brazilian Symposium on Programming Languages},
	doi        = {https://doi.org/10.1016/j.scico.2012.05.003},
	groups     = {Mapping cloned code},
	keywords   = {Software product line, Evolution, Reengineering, Legacy system, Refactoring},
	nºtabela   = {1},
	repository = {SCIENCE},
	url        = {https://www.sciencedirect.com/science/article/pii/S0167642312000895},
}
@InProceedings{Vale2015,
	author     = {G. Vale and R. Abílio and A. Freire and H. Costa},
	title      = {Criteria and Guidelines to Improve Software Maintainability in Software Product Lines},
	booktitle  = {2015 12th International Conference on Information Technology - New Generations},
	year       = {2015},
	pages      = {427-432},
	month      = {April},
	doi        = {10.1109/ITNG.2015.75},
	groups     = {Mapping cloned code},
	keywords   = {software maintenance;software product lines;source code (software);MI;Tank War SPL;maintainability index;software design;software development;software maintainability;software product lines;source code;Cloning;Complexity theory;Documentation;Guidelines;Maintenance engineering;Measurement;Software;Feature Oriented Development;Software Maintenance;Software Product Line;Software Quality},
	repository = {IEEE},
}

@MASTERSTHESIS {alexandremartinspaiva2016,
	author  = "Alexandre Martins Paiva and Eduardo Figueiredo",
	title   = "ON THE DETECTION OF CODE CLONE WITH SEQUENCE OF METHOD CALLS",
	school  = "University of Minas Gerais",
	year    = "2016",
	type    = "Masters Thesis",
	address = "Belo Horizonte",
	month   = "may"
}

@Article{Schulze2011a,
	author        = {Schulze, S. and Apel, S. and Kästner, C.},
	title         = {Code clones in feature-oriented software product lines},
	journal       = {ACM SIGPLAN Notices},
	year          = {2011},
	volume        = {46},
	number        = {2},
	pages         = {103-112},
	note          = {cited By 2},
	document_type = {Article},
	doi           = {10.1145/1942788.1868310},
	repository    = {SCOPUS},
	source        = {Scopus},
	url           = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-79951743431&doi=10.1145%2f1942788.1868310&partnerID=40&md5=f151bb4f4d206bf539e21a1b3fc92e58},
}

@book{correa2000administraccao,
	title={Administra{\c{c}}{\~a}o de Produ{\c{c}}{\~a}o E Opera{\c{c}}{\~o}es: Manufatura E Servi{\c{c}}os: Uma Abordagem Estrat{\'e}gica .},
	author={Corr{\^e}a, Henrique L and Corr{\^e}a, Carlos A},
	year={2000},
	publisher={Editora Atlas SA}
}
@article{moresi2003metodologia,
	title={Metodologia da pesquisa},
	author={Moresi, Eduardo and others},
	journal={Bras{\'\i}lia: Universidade Cat{\'o}lica de Bras{\'\i}lia},
	volume={108},
	pages={24},
	year={2003}
}